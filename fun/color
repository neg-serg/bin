#!/bin/zsh

function tput_test(){
    for fg_ in {0..7}; do
        sf=$(tput setaf $fg_)
        for bg_ in {0..7}; do
            sb=$(tput setab $bg_)
            echo -n $sb$sf
            printf ' F:%s B:%s ' $fg_ $bg_
        done
        echo $(tput sgr0)
    done
}

function 256colors(){
    for code in {0..255}; do echo -e "\e[38;05;${code}m $code: Test"; done
}

function color8_init(){
    for i in {0..8}; do
        printf -v f$i %b "\e[38;05;${i}m"
    done
    bld=$'\e[1m'
    rst=$'\e[0m'
    inv=$'\e[7m'
    w=$'\e[37m'
}

function init_ansi() {
    esc=""

    Bf="${esc}[30m";   rf="${esc}[31m";   gf="${esc}[32m"
    yf="${esc}[33m";   bf="${esc}[34m";   pf="${esc}[35m"
    cf="${esc}[36m";   wf="${esc}[37m";

    Bb="${esc}[40m";  rb="${esc}[41m";  gb="${esc}[42m"
    yb="${esc}[43m"   bb="${esc}[44m";   pb="${esc}[45m"
    cb="${esc}[46m";  wb="${esc}[47m"

    ON="${esc}[1m";        OFF="${esc}[22m"
    italicson="${esc}[3m"; italicsoff="${esc}[23m"
    ulon="${esc}[4m";      uloff="${esc}[24m"
    invon="${esc}[7m";     invoff="${esc}[27m"

    reset="${esc}[0m"
}

function init_ansi2(){
  esc=""

  blackf="${esc}[30m";   redf="${esc}[31m";    greenf="${esc}[32m"
  yellowf="${esc}[33m"   bluef="${esc}[34m";   purplef="${esc}[35m"
  cyanf="${esc}[36m";    whitef="${esc}[37m"

  blackb="${esc}[40m";   redb="${esc}[41m";    greenb="${esc}[42m"
  yellowb="${esc}[43m"   blueb="${esc}[44m";   purpleb="${esc}[45m"
  cyanb="${esc}[46m";    whiteb="${esc}[47m"

  boldon="${esc}[1m";    boldoff="${esc}[22m"
  italicson="${esc}[3m"; italicsoff="${esc}[23m"
  ulon="${esc}[4m";      uloff="${esc}[24m"
  invon="${esc}[7m";     invoff="${esc}[27m"

  reset="${esc}[0m"
}


function crunchbang_mini(){
init_ansi2

cat << EOF

 ${reset}${redf}▄█▄█▄ ${reset}${boldon}${redf}█ ${reset}${greenf}▄█▄█▄ ${reset}${boldon}${greenf}█ ${reset}${yellowf}▄█▄█▄ ${reset}${boldon}${yellowf}█ ${reset}${bluef}▄█▄█▄ ${reset}${boldon}${bluef}█ ${reset}${purplef}▄█▄█▄ ${reset}${boldon}${purplef}█ ${reset}${cyanf}▄█▄█▄ ${reset}${boldon}${cyanf}█${reset}
 ${reset}${redf}▄█▄█▄ ${reset}${boldon}${redf}▀ ${reset}${greenf}▄█▄█▄ ${reset}${boldon}${greenf}▀ ${reset}${yellowf}▄█▄█▄ ${reset}${boldon}${yellowf}▀ ${reset}${bluef}▄█▄█▄ ${reset}${boldon}${bluef}▀ ${reset}${purplef}▄█▄█▄ ${reset}${boldon}${purplef}▀ ${reset}${cyanf}▄█▄█▄ ${reset}${boldon}${cyanf}▀${reset}
 ${reset}${redf} ▀ ▀  ${reset}${boldon}${redf}▀ ${reset}${greenf} ▀ ▀  ${reset}${boldon}${greenf}▀ ${reset}${yellowf} ▀ ▀  ${reset}${boldon}${yellowf}▀ ${reset}${bluef} ▀ ▀  ${reset}${boldon}${bluef}▀ ${reset}${purplef} ▀ ▀  ${reset}${boldon}${purplef}▀ ${reset}${cyanf} ▀ ▀  ${reset}${boldon}${cyanf}▀${reset}
EOF
}

function pukeskull(){
    #
    #  ┳━┓┳━┓0┏┓┓┳━┓┏━┓┓ ┳
    #  ┃┳┛┃━┫┃┃┃┃┃━┃┃ ┃┃┃┃
    #  ┃┗┛┛ ┃┃┃┗┛┻━┛┛━┛┗┻┛
    #     ┳━┓┳ ┓┳┏ ┳━┓
    #     ┃━┛┃ ┃┣┻┓┣━
    #     ┇  ┗━┛┃ ┛┻━┛
    #    ┓━┓┳┏ ┳ ┓┳  ┳
    #    ┗━┓┣┻┓┃ ┃┃  ┃
    #    ━━┛┇ ┛┗━┛┗━┛┗━┛
    #
    # the worst color script
    # by xero <http://0w.nz>

    cat << 'EOF'
    [1;37m                  .................
    [1;37m             .syhhso++++++++/++osyyhys+.
    [1;37m          -oddyo+o+++++++++++++++o+oo+osdms:
    [1;37m        :dmyo++oosssssssssssssssooooooo+/+ymm+`
    [1;37m       hmyo++ossyyhhddddddddddddhyyyssss+//+ymd-
    [1;37m     -mho+oosyhhhddmmmmmmmmmmmmmmddhhyyyso+//+hN+
    [1;37m     my+++syhhhhdmmNNNNNNNNNNNNmmmmmdhhyyyyo//+sd:
    [1;37m    hs//+oyhhhhdmNNNNNNNNNNNNNNNNNNmmdhyhhhyo//++y
    [1;37m    s+++shddhhdmmNNNNNNNNNNNNNNNNNNNNmdhhhdhyo/++/
    [1;37m    'hs+shmmmddmNNNNNNNNNNNNNNNNNNNNNmddddddhs+oh/
    [1;37m     shsshdmmmmmNNMMMMMMMMMMMNNNNNNNNmmmmmmdhssdh-
    [1;37m      +ssohdmmmmNNNNNMMMMMMMMNNNNNNmmmmmNNmdhhhs:`
    [1;37m  -+oo++////++sydmNNNNNNNNNNNNNNNNNNNdyyys/--://+//:
    [1;37m  d/+hmNNNmmdddhhhdmNNNNNNNNNNNNNNNmdhyyyhhhddmmNmdyd-
    [1;37m  ++--+ymNMMNNNNNNmmmmNNNNNNNNNNNmdhddmNNMMMMMMNmhyss
    [1;37m   /d+` -+ydmNMMMMMMNNmNMMMMMMMmmmmNNMMMMMNNmh- :sdo
    [1;37m    sNo   ` /ohdmNNMMMMNNMMMMMNNNMMMMMNmdyo/ `  hNh
    [1;37m     M+'     ``-/oyhmNNMNhNMNhNMMMMNmho/ `     'MN/
    [1;37m     d+'         `-+osydh0w.nzmNNmho:          'mN:
    [1;37m    +o/             ` :oo+:s :+o/-`            -dds
    [1;37m   :hdo       [0;31mx[1;37m    `-/ooss:':+ooo: `    [0;31m0[1;37m      :sdm+
    [1;37m  +dNNNh+         :ydmNNm'   `sddmyo          +hmNmds
    [1;37m dhNMMNNNNmddhsyhdmmNNNM:      NNmNmhyo+oyyyhmNMMNmysd
    [1;37m ydNNNNNh+/++ohmMMMMNMNh       oNNNNNNNmho++++yddhyssy
    [1;37m              `:sNMMMMN'       `mNMNNNd/`
        [1;31mXXXX[0;31mXXXX[1;33mX[1;37m y/hMMNm/  .dXb.  -hdmdy: ` [0;34mXXX[1;37mXXXX
        [1;31mXXXX[0;31mXXXX[1;37m `o+hNNds. -ymNNy-  .yhys+/`` [0;34mXX[1;37mXXXX
        [1;31mXXXX[0;31mXXXX[1;37m +-+//o/+odMNMMMNdmh++////-/s [0;34mXX[1;37mXXXX
        [1;31mXXXX[0;31mXXX[1;37m mhNd -+d/+myo++ysy/hs -mNsdh/ [0;34mXX[1;37mXXXX
        [1;31mXXXX[0;31mXXXX[1;37m mhMN+ dMm-/-smy-::dMN/sMMmdo [0;34mXX[1;37mXXXX
        [1;31mXXXX[0;31mXXXX[1;33mXX[1;37m NMy+NMMh oMMMs yMMMyNMMs+ [0;34mXXX[1;37mXXXX
        [1;31mXXXX[0;31mXXXX[1;33mXXX[1;37m dy-hMMm+dMMMdoNMMh ydo [1;34mX[0;34mXXXX[1;37mXXXX
        [1;31mXXXX[0;31mXXXX[1;33mXXXX[0;33mX [1;37m smm 'NMMy dms  sm  [1;34mXX[0;34mXXXX[1;37mXXXX
        [1;31mXXXX[0;31mXXXX[1;33mXXXX[0;33mXX                   [1;34mXXX[0;34mXXXX[1;37mXXXX
        [1;31mXXXX[0;31mXXXX[1;33mXXXX[0;33mXXXX[1;35mXXXX[0;35mXXXX[1;32mXXXX[0;32mXXXX[1;34mXXXX[0;34mXXXX[1;37mXXXX
        [1;31mXXXX[0;31mXXXX[1;33mXXXX[0;33mXXXX[1;35mXXXX[0;35mXXXX[1;32mXXXX[0;32mXXXX[1;34mXXXX[0;34mXXXX[1;37mXXXX
        [1;31mXXXX[0;31mXXXX[1;33mXXXX[0;33mXXXX[1;35mXXXX[0;35mXXXX[1;32mXXXX[0;32mXXXX[1;34mXXXX[0;34mXXXX[1;37mXXXX
        [1;31mXXXX[0;31mXXXX[1;33mXXXX[0;33mXXXX[1;35mXXXX[0;35mXXXX[1;32mXXXX[0;32mXXXX[1;34mXXXX[0;34mXXXX[1;37mXXXX
        [1;31mXXXX[0;31mXXXX[1;33mXXXX[0;33mXXXX[1;35mXXXX[0;35mXXXX[1;32mXXXX[0;32mXXXX[1;34mXXXX[0;34mXXXX[1;37mXXXX
        [1;31mXXXX[0;31mXXXX[1;33mXXXX[0;33mXXXX[1;35mXXXX[0;35mXXXX[1;32mXXXX[0;32mXXXX[1;34mXXXX[0;34mXXXX[1;37mXXXX
        [1;31mXXXX[0;31mXXXX[1;33mXXXX[0;33mXXXX[1;35mXXXX[0;35mXXXX[1;32mXXXX[0;32mXXXX[1;34mXXXX[0;34mXXXX[1;37mXXXX
        [1;31mXXXX[0;31mXXXX[1;33mXXXX[0;33mXXXX[1;35mXXXX[0;35mXXXX[1;32mXXXX[0;32mXXXX[1;34mXXXX[0;34mXXXX[1;37mXXXX
        [1;31mXXXX[0;31mXXXX[1;33mXXXX[0;33mXXXX[1;35mXXXX[0;35mXXXX[1;32mXXXX[0;32mXXXX[1;34mXXXX[0;34mXXXX[1;37mXXXX
        [1;31mXXXX[0;31mXXXX[1;33mXXXX[0;33mXXXX[1;35mXXXX[0;35mXXXX[1;32mXXXX[0;32mXXXX[1;34mXXXX[0;34mXXXX[1;37mXXXX
        [1;31mXXXX[0;31mXXXX[1;33mXXXX[0;33mXXXX[1;35mXXXX[0;35mXXXX[1;32mXXXX[0;32mXXXX[1;34mXXXX[0;34mXXXX[1;37mXXXX
        [1;31mXXXX[0;31mXXXX[1;33mXXXX[0;33mXXXX[1;35mXXXX[0;35mXXXX[1;32mXXXX[0;32mXXXX[1;34mXXXX[0;34mXXXX[1;37mXXXX
        [1;31mXXXX[0;31mXXXX[1;33mXXXX[0;33mXXXX[1;35mXXXX[0;35mXXXX[1;32mXXXX[0;32mXXXX[1;34mXXXX[0;34mXXXX[1;37mXXXX
        [1;31mXXXX[0;31mXXXX[1;33mXXXX[0;33mXXXX[1;35mXXXX[0;35mXXXX[1;32mXXXX[0;32mXXXX[1;34mXXXX[0;34mXXXX[1;37mXXXX
        [1;31mXXXX[0;31mXXXX[1;33mXXXX[0;33mXXXX[1;35mXXXX[0;35mXXXX[1;32mXXXX[0;32mXXXX[1;34mXXXX[0;34mXXXX[1;37mXXXX
        [1;31mXXXX[0;31mXXXX[1;33mXXXX[0;33mXXXX[1;35mXXXX[0;35mXXXX[1;32mXXXX[0;32mXXXX[1;34mXXXX[0;34mXXXX[1;37mXXXX
        [1;31mXXXX[0;31mXXXX[1;33mXXXX[0;33mXXXX[1;35mXXXX[0;35mXXXX[1;32mXXXX[0;32mXXXX[1;34mXXXX[0;34mXXXX[1;37mXXXX
        [1;31mXXXX[0;31mXXXX[1;33mXXXX[0;33mXXXX[1;35mXXXX[0;35mXXXX[1;32mXXXX[0;32mXXXX[1;34mXXXX[0;34mXXXX[1;37mXXXX
        [1;31mXXXX[0;31mXXXX[1;33mXXXX[0;33mXXXX[1;35mXXXX[0;35mXXXX[1;32mXXXX[0;32mXXXX[1;34mXXXX[0;34mXXXX[1;37mXXXX
        [1;31mXXXX[0;31mXXXX[1;33mXXXX[0;33mXXXX[1;35mXXXX[0;35mXXXX[1;32mXXXX[0;32mXXXX[1;34mXXXX[0;34mXXXX[1;37mXXXX
        [1;31mXXXX[0;31mXXXX[1;33mXXXX[0;33mXXXX[1;35mXXXX[0;35mXXXX[1;32mXXXX[0;32mXXXX[1;34mXXXX[0;34mXXXX[1;37mXXXX
        [1;31mXXXX[0;31mXXXX[1;33mXXXX[0;33mXXXX[1;35mXXXX[0;35mXXXX[1;32mXXXX[0;32mXXXX[1;34mXXXX[0;34mXXXX[1;37mXER0
EOF
}

function reference() {
    echo -en "\n   +  "
    for i in {0..35}; do
        printf "%2b " $i
    done
    printf "\n\n %3b  " 0
    for i in {0..15}; do
        echo -en "\033[48;5;${i}m  \033[m "
    done
    #for i in 16 52 88 124 160 196 232; do
    for i in {0..6}; do
        let "i = i*36 +16"
        printf "\n\n %3b  " $i
        for j in {0..35}; do
            let "val = i+j"
            echo -en "\033[48;5;${val}m  \033[m "
        done
    done
    echo -e "\n"
}

function pacman() {
    init_ansi
    cat << EOF

    ${yf}  ▄███████▄${reset}   ${rf}  ▄██████▄${reset}    ${gf}  ▄██████▄${reset}    ${bf}  ▄██████▄${reset}    ${pf}  ▄██████▄${reset}    ${cf}  ▄██████▄${reset}
    ${yf}▄█████████▀▀${reset}  ${rf}▄${wf}█▀█${rf}██${wf}█▀█${rf}██▄${reset}  ${gf}▄${wf}█▀█${gf}██${wf}█▀█${gf}██▄${reset}  ${bf}▄${wf}█▀█${bf}██${wf}█▀█${bf}██▄${reset}  ${pf}▄${wf}█▀█${pf}██${wf}█▀█${pf}██▄${reset}  ${cf}▄${wf}█▀█${cf}██${wf}█▀█${cf}██▄${reset}
    ${yf}███████▀${reset}      ${rf}█${wf}▄▄█${rf}██${wf}▄▄█${rf}███${reset}  ${gf}█${wf}▄▄█${gf}██${wf}▄▄█${gf}███${reset}  ${bf}█${wf}▄▄█${bf}██${wf}▄▄█${bf}███${reset}  ${pf}█${wf}▄▄█${pf}██${wf}▄▄█${pf}███${reset}  ${cf}█${wf}▄▄█${cf}██${wf}▄▄█${cf}███${reset}
    ${yf}███████▄${reset}      ${rf}████████████${reset}  ${gf}████████████${reset}  ${bf}████████████${reset}  ${pf}████████████${reset}  ${cf}████████████${reset}
    ${yf}▀█████████▄▄${reset}  ${rf}██▀██▀▀██▀██${reset}  ${gf}██▀██▀▀██▀██${reset}  ${bf}██▀██▀▀██▀██${reset}  ${pf}██▀██▀▀██▀██${reset}  ${cf}██▀██▀▀██▀██${reset}
    ${yf}  ▀███████▀${reset}   ${rf}▀   ▀  ▀   ▀${reset}  ${gf}▀   ▀  ▀   ▀${reset}  ${bf}▀   ▀  ▀   ▀${reset}  ${pf}▀   ▀  ▀   ▀${reset}  ${cf}▀   ▀  ▀   ▀${reset}

    ${ON}${yf}  ▄███████▄   ${rf}  ▄██████▄    ${gf}  ▄██████▄    ${bf}  ▄██████▄    ${pf}  ▄██████▄    ${cf}  ▄██████▄${reset}
    ${ON}${yf}▄█████████▀▀  ${rf}▄${wf}█▀█${rf}██${wf}█▀█${rf}██▄  ${gf}▄${wf}█▀█${gf}██${wf}█▀█${gf}██▄  ${bf}▄${wf}█▀█${bf}██${wf}█▀█${bf}██▄  ${pf}▄${wf}█▀█${pf}██${wf}█▀█${pf}██▄  ${cf}▄${wf}█▀█${cf}██${wf}█▀█${cf}██▄${reset}
    ${ON}${yf}███████▀      ${rf}█${wf}▄▄█${rf}██${wf}▄▄█${rf}███  ${gf}█${wf}▄▄█${gf}██${wf}▄▄█${gf}███  ${bf}█${wf}▄▄█${bf}██${wf}▄▄█${bf}███  ${pf}█${wf}▄▄█${pf}██${wf}▄▄█${pf}███  ${cf}█${wf}▄▄█${cf}██${wf}▄▄█${cf}███${reset}
    ${ON}${yf}███████▄      ${rf}████████████  ${gf}████████████  ${bf}████████████  ${pf}████████████  ${cf}████████████${reset}
    ${ON}${yf}▀█████████▄▄  ${rf}██▀██▀▀██▀██  ${gf}██▀██▀▀██▀██  ${bf}██▀██▀▀██▀██  ${pf}██▀██▀▀██▀██  ${cf}██▀██▀▀██▀██${reset}
    ${ON}${yf}  ▀███████▀   ${rf}▀   ▀  ▀   ▀  ${gf}▀   ▀  ▀   ▀  ${bf}▀   ▀  ▀   ▀  ${pf}▀   ▀  ▀   ▀  ${cf}▀   ▀  ▀   ▀${reset}

EOF
}

function colorvalues() {
    local xdef="${XDG_CONFIG_HOME}/xres/colors/current_colors"
    local colors=( $( sed -re '/^!/d; /^$/d; /^#/d; s/(\*color)([0-9]):/\10\2:/g;' ${xdef} | grep 'color[01][0-9]:' | sort | sed  's/^.*: *//g' ) )
    echo -e "\e[1;37m
    Black    Red      Green    Yellow   Blue     Magenta   Cyan    White
    ──────────────────────────────────────────────────────────────────────\e[0m"
    for i in {0..7}; do echo -en "\e[$((30+$i))m ${colors[i]} \e[0m"; done
    echo
    for i in {8..15}; do echo -en "\e[1;$((22+$i))m ${colors[i]} \e[0m"; done
    echo -e "\n"
}


# note in this first use that switching colors doesn't require a reset
# first - the new color overrides the old one.

function invader() {
    color8_init
    cat << EOF

    $f0  ▄██▄     $f1  ▀▄   ▄▀     $f2 ▄▄▄████▄▄▄    $f3  ▄██▄     $f4  ▀▄   ▄▀     $f5 ▄▄▄████▄▄▄    $f6  ▄██▄   $rst
    $f0▄█▀██▀█▄   $f1 ▄█▀███▀█▄    $f2███▀▀██▀▀███   $f3▄█▀██▀█▄   $f4 ▄█▀███▀█▄    $f5███▀▀██▀▀███   $f6▄█▀██▀█▄ $rst
    $f0▀▀█▀▀█▀▀   $f1█▀███████▀█   $f2▀▀▀██▀▀██▀▀▀   $f3▀▀█▀▀█▀▀   $f4█▀███████▀█   $f5▀▀▀██▀▀██▀▀▀   $f6▀▀█▀▀█▀▀ $rst
    $f0▄▀▄▀▀▄▀▄   $f1▀ ▀▄▄ ▄▄▀ ▀   $f2▄▄▀▀ ▀▀ ▀▀▄▄   $f3▄▀▄▀▀▄▀▄   $f4▀ ▀▄▄ ▄▄▀ ▀   $f5▄▄▀▀ ▀▀ ▀▀▄▄   $f6▄▀▄▀▀▄▀▄ $rst

    $bld $f0  ▄██▄     $f1  ▀▄   ▄▀     $f2 ▄▄▄████▄▄▄    $f3  ▄██▄     $f4  ▀▄   ▄▀     $f5 ▄▄▄████▄▄▄    $f6  ▄██▄  $rst
    $bld $f0▄█▀██▀█▄   $f1 ▄█▀███▀█▄    $f2███▀▀██▀▀███   $f3▄█▀██▀█▄   $f4 ▄█▀███▀█▄    $f5███▀▀██▀▀███   $f6▄█▀██▀█▄$rst
    $bld $f0▀▀█▀▀█▀▀   $f1█▀███████▀█   $f2▀▀▀██▀▀██▀▀▀   $f3▀▀█▀▀█▀▀   $f4█▀███████▀█   $f5▀▀▀██▀▀██▀▀▀   $f6▀▀█▀▀█▀▀$rst
    $bld $f0▄▀▄▀▀▄▀▄   $f1▀ ▀▄▄ ▄▄▀ ▀   $f2▄▄▀▀ ▀▀ ▀▀▄▄   $f3▄▀▄▀▀▄▀▄   $f4▀ ▀▄▄ ▄▄▀ ▀   $f5▄▄▀▀ ▀▀ ▀▀▄▄   $f6▄▀▄▀▀▄▀▄$rst


                                                $f7▌$rst

                                                $f7▌$rst

                                            $f7    ▄█▄    $rst
                                            $f7▄█████████▄$rst
                                            $f7▀▀▀▀▀▀▀▀▀▀▀$rst

EOF
}


function full_ansi(){
    fmt="%3d \e[%dmSGR \e[31mSGR \e[44mSGR\e[49m \e[39m\e[44mSGR\e[0m"
    echo
    echo "SGR ($fmt)"
    echo
    for i in {1..25} ; do
        a=()
        for j in {0..75..25}; do
            a=("${a[@]}" "$((i+j))" "$((i+j))")
        done
        printf "$fmt $fmt $fmt $fmt\n" "${a[@]}"
    done
    echo
    for i in {100..110..4} ; do
        a=()
        for j in {0..3}; do
            a=("${a[@]}" "$((i+j))" "$((i+j))")
        done
        printf "$fmt $fmt $fmt $fmt\n" "${a[@]}"
    done

    fmt="\e[48;5;%dm   \e[0m"
    echo
    echo "256 Colors ($fmt)"
    echo
    for i in {0..7} ; do printf "%3d " "$i" ; done
    for i in {232..243} ; do printf "%3d " "$i" ; done ; echo
    for i in {0..7} ; do printf "$fmt " "$i" ; done
    for i in {232..243} ; do printf "$fmt " "$i" ; done ; echo

    for i in {8..15} ; do printf  "%3d " "$i" ; done ;
    for i in {244..255} ; do printf "%3d " "$i" ; done ; echo
    for i in {8..15} ; do printf "$fmt " "$i" ; done ;
    for i in {244..255} ; do printf "$fmt " "$i" ; done ; echo
    echo

    fmt="%3d \e[38;5;0m\e[48;5;%dm___\e[0m"
    for i in {16..51} ; do
        a=()
        for j in {0..196..36}; do
            a=("${a[@]}" "$((i+j))" "$((i+j))")
        done
        printf "$fmt $fmt $fmt $fmt $fmt $fmt\n" "${a[@]}"
    done

}

function blocks (){
    init_ansi
    cat << EOF

    ${rf}▒▒▒▒${reset} ${ON}${rf}▒▒${reset}   ${gf}▒▒▒▒${reset} ${ON}${gf}▒▒${reset}   ${yf}▒▒▒▒${reset} ${ON}${yf}▒▒${reset}   ${bf}▒▒▒▒${reset} ${ON}${bf}▒▒${reset}   ${pf}▒▒▒▒${reset} ${ON}${pf}▒▒${reset}   ${cf}▒▒▒▒${reset} ${ON}${cf}▒▒${reset}
    ${rf}▒▒ ■${reset} ${ON}${rf}▒▒${reset}   ${gf}▒▒ ■${reset} ${ON}${gf}▒▒${reset}   ${yf}▒▒ ■${reset} ${ON}${yf}▒▒${reset}   ${bf}▒▒ ■${reset} ${ON}${bf}▒▒${reset}   ${pf}▒▒ ■${reset} ${ON}${pf}▒▒${reset}   ${cf}▒▒ ■${reset} ${ON}${cf}▒▒${reset}
    ${rf}▒▒ ${reset}${ON}${rf}▒▒▒▒${reset}   ${gf}▒▒ ${reset}${ON}${gf}▒▒▒▒${reset}   ${yf}▒▒ ${reset}${ON}${yf}▒▒▒▒${reset}   ${bf}▒▒ ${reset}${ON}${bf}▒▒▒▒${reset}   ${pf}▒▒ ${reset}${ON}${pf}▒▒▒▒${reset}   ${cf}▒▒ ${reset}${ON}${cf}▒▒▒▒${reset}

EOF
    cat << EOF
    ${Bf}████${reset}${Bb}████${reset} ${rf}████${reset}${rb}████${reset} ${gf}████${reset}${gb}████${reset} ${yf}████${reset}${yb}████${reset} ${bf}████${reset}${bb}████${reset} ${pf}████${reset}${pb}████${reset} ${cf}████${reset}${cb}████${reset} ${wf}████${reset}${wb}████${reset}
    ${Bf}████${reset}${Bb}████${reset} ${rf}████${reset}${rb}████${reset} ${gf}████${reset}${gb}████${reset} ${yf}████${reset}${yb}████${reset} ${bf}████${reset}${bb}████${reset} ${pf}████${reset}${pb}████${reset} ${cf}████${reset}${cb}████${reset} ${wf}████${reset}${wb}████${reset}
    ${Bf}████${reset}${Bb}████${reset} ${rf}████${reset}${rb}████${reset} ${gf}████${reset}${gb}████${reset} ${yf}████${reset}${yb}████${reset} ${bf}████${reset}${bb}████${reset} ${pf}████${reset}${pb}████${reset} ${cf}████${reset}${cb}████${reset} ${wf}████${reset}${wb}████${reset}

EOF

}

function colorformatting(){
    for clbg in {40..47} {100..107} 49 ; do  #Foreground
        for clfg in {30..37} {90..97} 39 ; do #Formatting
            for attr in 0 1 2 4 5 7 ; do #Print the result
                echo -en "\e[${attr};${clbg};${clfg}m ^[${attr};${clbg};${clfg}m \e[0m"
            done
            echo #Newline
        done
    done
}

function list() {
    local arg
    local mode

    if [[ -z ${1} ]]; then
        arg="gYw"
    else
        arg="$1"
    fi

    cmd_slim=$'echo -en "$EINS \033[$FG\033[$BG $T \033[0m"'
    cmd_default=$'echo -en "$EINS \033[$FG\033[$BG  $T  \033[0m"'

    local delimiter_default=" \t"
    local delimiter_slim=" "

    T="${arg}"

    if [[ ! -z "$2" ]]; then
        mode="slim"
        dl_=${delimiter_slim}
        pre_dl_="\t     "
    else
        mode="default"
        dl_=${delimiter_default}
        pre_dl_="\t\t "
    fi

    echo -e "\n${pre_dl_}40m${dl_}41m${dl_}42m${dl_}43m${dl_}44m${dl_}45m${dl_}46m${dl_}47m";
    for FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m' \
        '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' \
        '  36m' '1;36m' '  37m' '1;37m';
    do FG=${FGs// /}
        echo -en " $FGs \033[$FG  $T  "
        for BG in 40m 41m 42m 43m 44m 45m 46m 47m; do
            eval "$(eval echo -ne \$cmd_${mode})"
        done
        echo;
    done
    echo
}

function all() {
    local START_COLOR=0
    local END_COLOR=255
    local LINE_LENGTH=16
    local i=$START_COLOR
    local only_block=0
    [[ $# -gt 0 ]] && [[ $@ = '-b' ]] && only_block=1
    printf '\n'
    while [[ $i -le $END_COLOR ]]; do
        if [[ $only_block -eq 1 ]]; then printf "\033[38;5;${i}m%s" '█'; else printf "\033[38;5;${i}m%s%03u" '■' $i;fi
        [ $(((i - START_COLOR + 1) % LINE_LENGTH)) -eq 0 -a $i -gt $START_COLOR ] && printf '\n'
        i=$((i + 1))
    done
    printf '\033[0m\n\n'
}

function bars() {
    init_ansi
    cat << EOF

    ${rf}▆▆▆▆▆▆▆▆▆▆${reset} ${gf}▆▆▆▆▆▆▆▆▆▆${reset} ${yf}▆▆▆▆▆▆▆▆▆▆${reset} ${bf}▆▆▆▆▆▆▆▆▆▆${reset} ${pf}▆▆▆▆▆▆▆▆▆▆${reset} ${cf}▆▆▆▆▆▆▆▆▆▆${reset} ${wf}▆▆▆▆▆▆▆▆▆▆${reset}
    ${ON}${Bf} ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::${reset}
    ${ON}${rf}▆▆▆▆▆▆▆▆▆▆${reset} ${ON}${gf}▆▆▆▆▆▆▆▆▆▆${reset} ${ON}${yf}▆▆▆▆▆▆▆▆▆▆${reset} ${ON}${bf}▆▆▆▆▆▆▆▆▆▆${reset} ${ON}${pf}▆▆▆▆▆▆▆▆▆▆${reset} ${ON}${cf}▆▆▆▆▆▆▆▆▆▆${reset} ${ON}${wf}▆▆▆▆▆▆▆▆▆▆${reset}

EOF
}

function minicolors() {
    init_ansi
    cat << EOF

    ${rf}■■■■${reset}${ON}${rf}■■${reset}   ${gf}■■■■${reset}${ON}${gf}■■${reset}   ${yf}■■■■${reset}${ON}${yf}■■${reset}   ${bf}■■■■${reset}${ON}${pf}■■${reset}   ${pf}■■■■${reset}${ON}${bf}■■${reset}   ${cf}■■■■${reset}${ON}${cf}■■${reset}
    ${rf}■■${reset}${ON}${gf}■■${reset}${ON}${rf}■■${reset}   ${gf}■■${reset}${ON}${yf}■■${reset}${ON}${gf}■■${reset}   ${yf}■■${reset}${ON}${bf}■■${reset}${ON}${yf}■■${reset}   ${bf}■■${reset}${pf}■■${reset}${ON}${pf}■■${reset}   ${pf}■■${reset}${ON}${cf}■■${reset}${ON}${bf}■■${reset}   ${cf}■■${reset}${ON}${pf}■■${reset}${ON}${cf}■■${reset}
    ${gf}■■${reset}${ON}${gf}■■${reset}${ON}${rf}■■${reset}   ${yf}■■${reset}${ON}${yf}■■${reset}${ON}${gf}■■${reset}   ${bf}■■${reset}${ON}${bf}■■${reset}${ON}${yf}■■${reset}   ${ON}${cf}■■${reset}${pf}■■${reset}${ON}${pf}■■${reset}   ${ON}${pf}■■${reset}${ON}${cf}■■${reset}${ON}${bf}■■${reset}   ${bf}■■${reset}${ON}${pf}■■${reset}${ON}${cf}■■${reset}
    ${gf}■■${reset}${ON}${gf}■■${reset}${ON}${rf}■■${reset}   ${yf}■■${reset}${ON}${yf}■■${reset}${ON}${gf}■■${reset}   ${bf}■■${reset}${ON}${bf}■■${reset}${ON}${yf}■■${reset}   ${ON}${cf}■■${reset}${pf}■■${reset}${ON}${pf}■■${reset}   ${ON}${pf}■■${reset}${ON}${cf}■■${reset}${ON}${bf}■■${reset}   ${bf}■■${reset}${ON}${pf}■■${reset}${ON}${cf}■■${reset}
    ${rf}■■■■${reset}${ON}${rf}■■${reset}   ${gf}■■■■${reset}${ON}${gf}■■${reset}   ${yf}■■■■${reset}${ON}${yf}■■${reset}   ${bf}■■■■${reset}${ON}${pf}■■${reset}   ${pf}■■■■${reset}${ON}${bf}■■${reset}   ${cf}■■■■${reset}${ON}${cf}■■${reset}
    ${rf}■■${reset}${ON}${gf}■■${reset}${ON}${rf}■■${reset}   ${gf}■■${reset}${ON}${yf}■■${reset}${ON}${gf}■■${reset}   ${yf}■■${reset}${ON}${bf}■■${reset}${ON}${yf}■■${reset}   ${bf}■■${reset}${pf}■■${reset}${ON}${pf}■■${reset}   ${pf}■■${reset}${ON}${cf}■■${reset}${ON}${bf}■■${reset}   ${cf}■■${reset}${ON}${pf}■■${reset}${ON}${cf}■■${reset}
    ${gf}■■${reset}${ON}${gf}■■${reset}${ON}${rf}■■${reset}   ${yf}■■${reset}${ON}${yf}■■${reset}${ON}${gf}■■${reset}   ${bf}■■${reset}${ON}${bf}■■${reset}${ON}${yf}■■${reset}   ${ON}${cf}■■${reset}${pf}■■${reset}${ON}${pf}■■${reset}   ${ON}${pf}■■${reset}${ON}${cf}■■${reset}${ON}${bf}■■${reset}   ${bf}■■${reset}${ON}${pf}■■${reset}${ON}${cf}■■${reset}
    ${gf}■■${reset}${ON}${gf}■■${reset}${ON}${rf}■■${reset}   ${yf}■■${reset}${ON}${yf}■■${reset}${ON}${gf}■■${reset}   ${bf}■■${reset}${ON}${bf}■■${reset}${ON}${yf}■■${reset}   ${ON}${cf}■■${reset}${pf}■■${reset}${ON}${pf}■■${reset}   ${ON}${pf}■■${reset}${ON}${cf}■■${reset}${ON}${bf}■■${reset}   ${bf}■■${reset}${ON}${pf}■■${reset}${ON}${cf}■■${reset}
    ${rf}■■■■${reset}${ON}${rf}■■${reset}   ${gf}■■■■${reset}${ON}${gf}■■${reset}   ${yf}■■■■${reset}${ON}${yf}■■${reset}   ${bf}■■■■${reset}${ON}${pf}■■${reset}   ${pf}■■■■${reset}${ON}${bf}■■${reset}   ${cf}■■■■${reset}${ON}${cf}■■${reset}
    ${rf}■■${reset}${ON}${gf}■■${reset}${ON}${rf}■■${reset}   ${gf}■■${reset}${ON}${yf}■■${reset}${ON}${gf}■■${reset}   ${yf}■■${reset}${ON}${bf}■■${reset}${ON}${yf}■■${reset}   ${bf}■■${reset}${pf}■■${reset}${ON}${pf}■■${reset}   ${pf}■■${reset}${ON}${cf}■■${reset}${ON}${bf}■■${reset}   ${cf}■■${reset}${ON}${pf}■■${reset}${ON}${cf}■■${reset}
    ${gf}■■${reset}${ON}${gf}■■${reset}${ON}${rf}■■${reset}   ${yf}■■${reset}${ON}${yf}■■${reset}${ON}${gf}■■${reset}   ${bf}■■${reset}${ON}${bf}■■${reset}${ON}${yf}■■${reset}   ${ON}${cf}■■${reset}${pf}■■${reset}${ON}${pf}■■${reset}   ${ON}${pf}■■${reset}${ON}${cf}■■${reset}${ON}${bf}■■${reset}   ${bf}■■${reset}${ON}${pf}■■${reset}${ON}${cf}■■${reset}
    ${gf}■■${reset}${ON}${gf}■■${reset}${ON}${rf}■■${reset}   ${yf}■■${reset}${ON}${yf}■■${reset}${ON}${gf}■■${reset}   ${bf}■■${reset}${ON}${bf}■■${reset}${ON}${yf}■■${reset}   ${ON}${cf}■■${reset}${pf}■■${reset}${ON}${pf}■■${reset}   ${ON}${pf}■■${reset}${ON}${cf}■■${reset}${ON}${bf}■■${reset}   ${bf}■■${reset}${ON}${pf}■■${reset}${ON}${cf}■■${reset}

EOF
}

function fancy(){
    FGNAMES=(' black ' '  red  ' ' green ' ' yellow' '  blue ' 'magenta' '  cyan ' ' white ')
    BGNAMES=('DFT' 'BLK' 'RED' 'GRN' 'YEL' 'BLU' 'MAG' 'CYN' 'WHT')
    echo "     ┌──────────────────────────────────────────────────────────────────────────┐"
    for b in $(seq 0 8); do
        if [ "$b" -gt 0 ]; then
        bg=$(($b+39))
        fi

        echo -en "\033[0m ${BGNAMES[$b]} │ "
        for f in $(seq 0 7); do
        echo -en "\033[${bg}m\033[$(($f+30))m ${FGNAMES[$f]} "
        done
        echo -en "\033[0m │"

        echo -en "\033[0m\n\033[0m     │ "
        for f in $(seq 0 7); do
        echo -en "\033[${bg}m\033[1;$(($f+30))m ${FGNAMES[$f]} "
        done
        echo -en "\033[0m │"
            echo -e "\033[0m"

    if [ "$b" -lt 8 ]; then
        echo "     ├──────────────────────────────────────────────────────────────────────────┤"
    fi
    done
    echo "     └──────────────────────────────────────────────────────────────────────────┘"
}

function 24bit(){
    awk 'BEGIN{ \
        s="/\\/\\/\\/\\/\\"; s=s s s s s s s s; \
        for (colnum = 0; colnum<77; colnum++) { \
            r = 255-(colnum*255/76); \
            g = (colnum*510/76); \
            b = (colnum*255/76); \
            if (g>255) g = 510-g; \
            printf "\033[48;2;%d;%d;%dm", r,g,b; \
            printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b; \
            printf "%s\033[0m", substr(s,colnum+1,1); \
        } \
        printf "\n"; \
    }'
}

function tmux_pallete(){
    for i in $(seq 0 4 255); do
        for j in $(seq $i $(expr $i + 3)); do
            for k in $(seq 1 $(expr 3 - ${#j})); do
                printf " "
            done
            printf "\x1b[38;5;${j}mcolour${j}"
            [[ $(expr $j % 4) != 3 ]] && printf "    "
        done
        printf "\n"
    done
}

function spectrum(){
    typeset -Ag FG BG

    for color in {0..255}; do
        FG[$color]="%{[38;5;${color}m%}"
        BG[$color]="%{[48;5;${color}m%}"
    done

    for color in {0..255}; do print -P "${FG[$color][3,-3]} $color $[ [##16] $color ]" ; done
}

function tiny_spectrum(){
# Author: crshd
# Source: http://crunchbang.org/forums/viewtopic.php?pid=128584#p128584

echo

for f in {0..6}; do
	echo -en "\033[$((f+41))m\033[$((f+30))m██▓▒░"
done
echo -en "\033[37m██\n"

echo

for f in {0..6}; do
	echo -en "\033[$((f+41))m\033[1;$((f+30))m██▓▒░"
done
echo -en "\033[1;37m██"

echo -e "\033[0m"
echo
}

function ls_colors(){
    typeset -A names
    names[no]="global default"
    names[fi]="normal file"
    names[di]="directory"
    names[ln]="symbolic link"
    names[pi]="named pipe"
    names[so]="socket"
    names[do]="door"
    names[bd]="block device"
    names[cd]="character device"
    names[or]="orphan symlink"
    names[mi]="missing file"
    names[su]="set uid"
    names[sg]="set gid"
    names[tw]="sticky other writable"
    names[ow]="other writable"
    names[st]="sticky"
    names[ex]="executable"
    for i in ${(s.:.)LS_COLORS}; do
        key=${i%\=*}
        color=${i#*\=}
        name=${names[(e)$key]-$key}
        printf '\e[%sm%s\e[m\n' $color $name
    done
}

function skulls(){
color8_init
cat << EOF
$f1  ▄▄▄▄▄▄▄   $f2  ▄▄▄▄▄▄▄   $f3  ▄▄▄▄▄▄▄   $f4  ▄▄▄▄▄▄▄   $f5  ▄▄▄▄▄▄▄   $f6  ▄▄▄▄▄▄▄
$f1▄█▀     ▀█▄ $f2▄█▀     ▀█▄ $f3▄█▀     ▀█▄ $f4▄█▀     ▀█▄ $f5▄█▀     ▀█▄ $f6▄█▀     ▀█▄
$f1█         █ $f2█         █ $f3█         █ $f4█         █ $f5█         █ $f6█         █
$f1███ ▄ ██  █ $f2███ ▄ ██  █ $f3███ ▄ ██  █ $f4███ ▄ ██  █ $f5███ ▄ ██  █ $f6███ ▄ ██  █
$f1█▄     ▄▄██ $f2█▄     ▄▄██ $f3█▄     ▄▄██ $f4█▄     ▄▄██ $f5█▄     ▄▄██ $f6█▄     ▄▄██
$f1 █▄█▄█▄██▀  $f2 █▄█▄█▄██▀  $f3 █▄█▄█▄██▀  $f4 █▄█▄█▄██▀  $f5 █▄█▄█▄██▀  $f6 █▄█▄█▄██▀  $bld
$f1  ▄▄▄▄▄▄▄   $f2  ▄▄▄▄▄▄▄   $f3  ▄▄▄▄▄▄▄   $f4  ▄▄▄▄▄▄▄   $f5  ▄▄▄▄▄▄▄   $f6  ▄▄▄▄▄▄▄
$f1▄█▀     ▀█▄ $f2▄█▀     ▀█▄ $f3▄█▀     ▀█▄ $f4▄█▀     ▀█▄ $f5▄█▀     ▀█▄ $f6▄█▀     ▀█▄
$f1█         █ $f2█         █ $f3█         █ $f4█         █ $f5█         █ $f6█         █
$f1███ ▄ ██  █ $f2███ ▄ ██  █ $f3███ ▄ ██  █ $f4███ ▄ ██  █ $f5███ ▄ ██  █ $f6███ ▄ ██  █
$f1█▄     ▄▄██ $f2█▄     ▄▄██ $f3█▄     ▄▄██ $f4█▄     ▄▄██ $f5█▄     ▄▄██ $f6█▄     ▄▄██
$f1 █▄█▄█▄██▀  $f2 █▄█▄█▄██▀  $f3 █▄█▄█▄██▀  $f4 █▄█▄█▄██▀  $f5 █▄█▄█▄██▀  $f6 █▄█▄█▄██▀
$rst
EOF
}

initializeANSI()
{
  esc=""

  Bf="${esc}[30m";   rf="${esc}[31m";   gf="${esc}[32m"
  yf="${esc}[33m";   bf="${esc}[34m";   pf="${esc}[35m"
  cf="${esc}[36m";   wf="${esc}[37m";

  Bb="${esc}[40m";  rb="${esc}[41m";  gb="${esc}[42m"
  yb="${esc}[43m"   bb="${esc}[44m";   pb="${esc}[45m"
  cb="${esc}[46m";  wb="${esc}[47m"

  ON="${esc}[1m";        OFF="${esc}[22m"
  italicson="${esc}[3m"; italicsoff="${esc}[23m"
  ulon="${esc}[4m";      uloff="${esc}[24m"
  invon="${esc}[7m";     invoff="${esc}[27m"

  reset="${esc}[0m"
}

function illuminate(){
    cat << EOF
    [1;33m._________________________________. [0;0;37m
    [1;33m|[34;7;1m  [0;0;0m[0;0;46m        [36;7;1m       [0;0;45m       [35;7;1m       [0;0;0m[0;0;45m [0;0;0m[0;0;41m [0;0;0m[1;33m| [0;0;37m
    [1;33m|[36;7;1m [0;0;0m[0;0;44m [0;0;0m               [0;34m_             [31;7;1m [0;0;0m[35;7;1m [0;0;0m[1;33m| [0;0;37m
    [1;33m|[34;7;1m [0;0;0m               [0;34m//\             [0;0;41m [0;0;0m[1;33m| [0;0;37m
    [1;33m|[34;7;1m [0;0;0m         [0;32m/[1;32m/-- [0;34m/[1;34m/  [0;36m\  [0;32m========, [0;0;41m [0;0;0m[1;33m| [0;0;37m
    [1;33m|[0;0;44m [0;0;0m        [0;32m/[1;32m/   [0;34m/[1;34m/    [0;36m\        [0;32m/  [31;7;1m [0;0;0m[1;33m| [0;0;37m
    [1;33m|[0;0;44m [0;0;0m       [0;32m/[1;32m/   [0;34m/[1;34m/      [0;36m\      [0;32m/   [31;7;1m [0;0;0m[1;33m| [0;0;37m
    [1;33m|[0;0;44m [0;0;0m [1;31m__________  ___[0;0;41m [0;37;7;1m [0;0;0m[0;31m__  _________[31;7;1m [0;0;0m[1;33m| [0;0;37m
    [1;33m|[0;0;42m [0;0;0m      [0;32m/     [0;34m\   [0;0;47m [31;7;1m [0;0;0m   [1;34m/[0;34m/  [1;32m/[0;32m/    [0;0;43m [0;0;0m[1;33m| [0;0;37m
    [1;33m|[0;0;42m [0;0;0m     [0;32m/       [0;34m\      [1;34m/[0;34m/  [1;32m/[0;32m/     [0;0;43m [0;0;0m[1;33m| [0;0;37m
    [1;33m|[0;0;42m [0;0;0m    [0;32m/__________________[1;32m/[0;32m/      [0;0;43m [0;0;0m[1;33m| [0;0;37m
    [1;33m|[32;7;1m [0;0;0m               [0;34m\  [1;34m/[0;34m/           [33;7;1m [0;0;0m[1;33m| [0;0;37m
    [1;33m|[32;7;1m [0;0;0m                [0;34m\[1;34m/[0;34m/            [33;7;1m [0;0;0m[1;33m| [0;0;37m
    [1;33m|[0;0;40m [0;0;0m[0;0;42m [0;0;0m                [1;34m"            [0;0;43m [0;0;0m[37;7;1m [0;0;0m[1;33m| [0;0;37m
    [1;33m|[32;7;1m [0;0;0m[30;7;1m [0;0;0m[0;0;40m        [0;0;0m[30;7;1m       [0;0;0m[0;0;47m       [0;0;0m[37;7;1m       [0;0;0m[0;0;47m [0;0;0m[33;7;1m [0;0;0m[1;33m| [0;0;37m
    [1;33m'---------------------------------' [0;0;37m
EOF
}

function blocks2(){
    init_ansi2
    cat << EOF
    ${redf}■■■■${reset}${boldon}${redf}■■${reset}   ${greenf}■■■■${reset}${boldon}${greenf}■■${reset}   ${yellowf}■■■■${reset}${boldon}${yellowf}■■${reset}   ${bluef}■■■■${reset}${boldon}${purplef}■■${reset}   ${purplef}■■■■${reset}${boldon}${bluef}■■${reset}   ${cyanf}■■■■${reset}${boldon}${cyanf}■■${reset}
    ${redf}■■${reset}${boldon}${greenf}■■${reset}${boldon}${redf}■■${reset}   ${greenf}■■${reset}${boldon}${yellowf}■■${reset}${boldon}${greenf}■■${reset}   ${yellowf}■■${reset}${boldon}${bluef}■■${reset}${boldon}${yellowf}■■${reset}   ${bluef}■■${reset}${purplef}■■${reset}${boldon}${purplef}■■${reset}   ${purplef}■■${reset}${boldon}${cyanf}■■${reset}${boldon}${bluef}■■${reset}   ${cyanf}■■${reset}${boldon}${purplef}■■${reset}${boldon}${cyanf}■■${reset}
    ${greenf}■■${reset}${boldon}${greenf}■■${reset}${boldon}${redf}■■${reset}   ${yellowf}■■${reset}${boldon}${yellowf}■■${reset}${boldon}${greenf}■■${reset}   ${bluef}■■${reset}${boldon}${bluef}■■${reset}${boldon}${yellowf}■■${reset}   ${boldon}${cyanf}■■${reset}${purplef}■■${reset}${boldon}${purplef}■■${reset}   ${boldon}${purplef}■■${reset}${boldon}${cyanf}■■${reset}${boldon}${bluef}■■${reset}   ${bluef}■■${reset}${boldon}${purplef}■■${reset}${boldon}${cyanf}■■${reset}
    ${greenf}■■${reset}${boldon}${greenf}■■${reset}${boldon}${redf}■■${reset}   ${yellowf}■■${reset}${boldon}${yellowf}■■${reset}${boldon}${greenf}■■${reset}   ${bluef}■■${reset}${boldon}${bluef}■■${reset}${boldon}${yellowf}■■${reset}   ${boldon}${cyanf}■■${reset}${purplef}■■${reset}${boldon}${purplef}■■${reset}   ${boldon}${purplef}■■${reset}${boldon}${cyanf}■■${reset}${boldon}${bluef}■■${reset}   ${bluef}■■${reset}${boldon}${purplef}■■${reset}${boldon}${cyanf}■■${reset}
    ${redf}■■■■${reset}${boldon}${redf}■■${reset}   ${greenf}■■■■${reset}${boldon}${greenf}■■${reset}   ${yellowf}■■■■${reset}${boldon}${yellowf}■■${reset}   ${bluef}■■■■${reset}${boldon}${purplef}■■${reset}   ${purplef}■■■■${reset}${boldon}${bluef}■■${reset}   ${cyanf}■■■■${reset}${boldon}${cyanf}■■${reset}
    ${redf}■■${reset}${boldon}${greenf}■■${reset}${boldon}${redf}■■${reset}   ${greenf}■■${reset}${boldon}${yellowf}■■${reset}${boldon}${greenf}■■${reset}   ${yellowf}■■${reset}${boldon}${bluef}■■${reset}${boldon}${yellowf}■■${reset}   ${bluef}■■${reset}${purplef}■■${reset}${boldon}${purplef}■■${reset}   ${purplef}■■${reset}${boldon}${cyanf}■■${reset}${boldon}${bluef}■■${reset}   ${cyanf}■■${reset}${boldon}${purplef}■■${reset}${boldon}${cyanf}■■${reset}
    ${greenf}■■${reset}${boldon}${greenf}■■${reset}${boldon}${redf}■■${reset}   ${yellowf}■■${reset}${boldon}${yellowf}■■${reset}${boldon}${greenf}■■${reset}   ${bluef}■■${reset}${boldon}${bluef}■■${reset}${boldon}${yellowf}■■${reset}   ${boldon}${cyanf}■■${reset}${purplef}■■${reset}${boldon}${purplef}■■${reset}   ${boldon}${purplef}■■${reset}${boldon}${cyanf}■■${reset}${boldon}${bluef}■■${reset}   ${bluef}■■${reset}${boldon}${purplef}■■${reset}${boldon}${cyanf}■■${reset}
    ${greenf}■■${reset}${boldon}${greenf}■■${reset}${boldon}${redf}■■${reset}   ${yellowf}■■${reset}${boldon}${yellowf}■■${reset}${boldon}${greenf}■■${reset}   ${bluef}■■${reset}${boldon}${bluef}■■${reset}${boldon}${yellowf}■■${reset}   ${boldon}${cyanf}■■${reset}${purplef}■■${reset}${boldon}${purplef}■■${reset}   ${boldon}${purplef}■■${reset}${boldon}${cyanf}■■${reset}${boldon}${bluef}■■${reset}   ${bluef}■■${reset}${boldon}${purplef}■■${reset}${boldon}${cyanf}■■${reset}
    ${redf}■■■■${reset}${boldon}${redf}■■${reset}   ${greenf}■■■■${reset}${boldon}${greenf}■■${reset}   ${yellowf}■■■■${reset}${boldon}${yellowf}■■${reset}   ${bluef}■■■■${reset}${boldon}${purplef}■■${reset}   ${purplef}■■■■${reset}${boldon}${bluef}■■${reset}   ${cyanf}■■■■${reset}${boldon}${cyanf}■■${reset}
    ${redf}■■${reset}${boldon}${greenf}■■${reset}${boldon}${redf}■■${reset}   ${greenf}■■${reset}${boldon}${yellowf}■■${reset}${boldon}${greenf}■■${reset}   ${yellowf}■■${reset}${boldon}${bluef}■■${reset}${boldon}${yellowf}■■${reset}   ${bluef}■■${reset}${purplef}■■${reset}${boldon}${purplef}■■${reset}   ${purplef}■■${reset}${boldon}${cyanf}■■${reset}${boldon}${bluef}■■${reset}   ${cyanf}■■${reset}${boldon}${purplef}■■${reset}${boldon}${cyanf}■■${reset}
    ${greenf}■■${reset}${boldon}${greenf}■■${reset}${boldon}${redf}■■${reset}   ${yellowf}■■${reset}${boldon}${yellowf}■■${reset}${boldon}${greenf}■■${reset}   ${bluef}■■${reset}${boldon}${bluef}■■${reset}${boldon}${yellowf}■■${reset}   ${boldon}${cyanf}■■${reset}${purplef}■■${reset}${boldon}${purplef}■■${reset}   ${boldon}${purplef}■■${reset}${boldon}${cyanf}■■${reset}${boldon}${bluef}■■${reset}   ${bluef}■■${reset}${boldon}${purplef}■■${reset}${boldon}${cyanf}■■${reset}
    ${greenf}■■${reset}${boldon}${greenf}■■${reset}${boldon}${redf}■■${reset}   ${yellowf}■■${reset}${boldon}${yellowf}■■${reset}${boldon}${greenf}■■${reset}   ${bluef}■■${reset}${boldon}${bluef}■■${reset}${boldon}${yellowf}■■${reset}   ${boldon}${cyanf}■■${reset}${purplef}■■${reset}${boldon}${purplef}■■${reset}   ${boldon}${purplef}■■${reset}${boldon}${cyanf}■■${reset}${boldon}${bluef}■■${reset}   ${bluef}■■${reset}${boldon}${purplef}■■${reset}${boldon}${cyanf}■■${reset}
EOF
}


function poke(){
init_ansi

cat << EOF
                        ${Bf}██████                    ${Bf}████████                  ██              ${Bf}████████                  ████████
                      ${Bf}██${gf}${ON}██████${OFF}${Bf}██                ${Bf}██${rf}${ON}██████${OFF}██${Bf}██              ██${rf}██${Bf}██          ${Bf}██${bf}${ON}██████${OFF}██${Bf}████            ██${bf}${ON}████████${OFF}${Bf}██
                  ${Bf}██████${gf}${ON}██████${OFF}${Bf}██              ${Bf}██${rf}${ON}██████████${OFF}██${Bf}██            ██${rf}████${Bf}██      ${Bf}██${bf}${ON}████████████${OFF}██${Bf}████      ████${bf}${ON}██████${OFF}████${Bf}██
              ${Bf}████${gf}${ON}████${OFF}██${ON}████${OFF}██${ON}██${OFF}${Bf}████          ${Bf}██${rf}${ON}████████████${OFF}${Bf}██            ██${rf}████${Bf}██      ${Bf}██${bf}${ON}██████████████${OFF}${Bf}██${pf}██${Bf}████  ██${bf}${ON}████${OFF}██${Bf}██${bf}████${Bf}██
      ${Bf}██    ██${gf}${ON}██████${OFF}████${ON}████${OFF}██${ON}██████${OFF}${Bf}██      ${Bf}██${rf}${ON}██████████████${OFF}██${Bf}██        ██${rf}████${yf}██${rf}██${Bf}██  ${Bf}██${bf}${ON}████████████████${OFF}██${pf}██${ON}██${OFF}██${Bf}██${bf}██${ON}██${OFF}██${Bf}██${bf}██████${Bf}██
    ${Bf}██${cf}${ON}██${OFF}${Bf}██████${gf}${ON}████${OFF}██${ON}██${OFF}██${ON}██████${OFF}██${ON}██████${OFF}${Bf}██  ${Bf}██${rf}${ON}████████${wf}██${OFF}${Bf}██${rf}${ON}████${OFF}██${Bf}██        ██${rf}██${yf}██${ON}██${OFF}${rf}██${Bf}██  ${Bf}██${bf}${ON}████████${wf}${ON}██${OFF}${Bf}██${bf}${ON}████${OFF}██${wf}${ON}██${OFF}${pf}${ON}████${OFF}██${Bf}██${bf}████${Bf}██${bf}████${Bf}██
    ${Bf}██${cf}${ON}██████${OFF}${Bf}████${gf}██${ON}██${OFF}██${ON}██████████${OFF}██${ON}████${OFF}${Bf}██  ${Bf}██${rf}${ON}████████${OFF}${Bf}████${rf}${ON}██${OFF}██████${Bf}██      ██${rf}██${yf}${ON}████${OFF}${rf}██${Bf}██  ${Bf}██${bf}██${ON}██████${OFF}${Bf}████${bf}${ON}██${OFF}████${wf}${ON}██${pf}██████${OFF}${Bf}██${bf}██${Bf}████████
    ${Bf}██${cf}${ON}████████${OFF}██${Bf}██${gf}${ON}██${OFF}██${ON}██████████${OFF}██${ON}████${OFF}${Bf}██  ${Bf}██${rf}${ON}████████${OFF}${Bf}████${rf}${ON}██${OFF}██████${Bf}██        ██${yf}${ON}██${OFF}${Bf}████      ${Bf}██${bf}████${ON}██${OFF}${Bf}████${bf}██████${Bf}██${wf}${ON}████${pf}██${OFF}██${Bf}████
  ${Bf}██${cf}${ON}████${OFF}██${ON}██${OFF}████${ON}██${OFF}${Bf}██████${gf}${ON}████████${OFF}██${ON}██${OFF}${Bf}██      ${Bf}██${rf}██${ON}████████${OFF}██████████${Bf}██      ██${rf}${ON}██${OFF}${Bf}██          ${Bf}████${bf}████████${Bf}████${bf}${ON}████${wf}██${OFF}${pf}████${Bf}██
${Bf}████${cf}██${ON}████████████████${OFF}${Bf}██${gf}██████${Bf}████████        ${Bf}████${rf}██████████████████${Bf}██  ██${rf}${ON}████${OFF}${Bf}██          ${Bf}██${bf}${ON}██${OFF}${Bf}████████${bf}${ON}██████${OFF}██${wf}${ON}██${OFF}${pf}████${Bf}██
${Bf}██${cf}████${ON}██████${OFF}██${ON}██████${OFF}${Bf}██${cf}██${Bf}██████${cf}██████${Bf}██            ${Bf}██████${rf}████${Bf}██${rf}██████${Bf}████${rf}██${ON}██${OFF}${Bf}██              ${Bf}████${yf}${ON}████${OFF}${Bf}██${bf}${ON}████${OFF}██${Bf}██${wf}${ON}██${OFF}${pf}████${Bf}██
${Bf}██${cf}${ON}████████${OFF}██${ON}██${OFF}${Bf}████${cf}${ON}██${OFF}██████████${Bf}██${cf}██${wf}${ON}██${OFF}${Bf}██              ${Bf}██${yf}${ON}████${OFF}${Bf}██${rf}${ON}████${OFF}${rf}██████${Bf}██${rf}██${ON}██${OFF}${Bf}██                  ${Bf}██${yf}████${Bf}████████${wf}${ON}██${OFF}${pf}████${Bf}██
${Bf}██${cf}██${ON}████████${OFF}${Bf}██${rf}${ON}██${wf}████${OFF}${cf}████${Bf}██${cf}████${Bf}██████                ${Bf}██${yf}${ON}██████${OFF}${Bf}████${rf}██████${Bf}██${rf}██${Bf}██                  ${Bf}██${bf}██${Bf}██${pf}██${yf}██████${pf}██${Bf}██${wf}${ON}██${OFF}${Bf}██
  ${Bf}██${cf}██${ON}██████${OFF}${Bf}██${rf}${ON}██${wf}██${cf}██${OFF}██${Bf}██${cf}████${Bf}██                    ${Bf}██${wf}${ON}██${OFF}${Bf}██${yf}${ON}██████${OFF}${rf}████████${Bf}████                      ${Bf}████████${pf}████${bf}██${Bf}██${wf}${ON}██${OFF}${Bf}██
    ${Bf}████${cf}████████████${Bf}██${cf}██████${Bf}██                      ${Bf}██████${yf}████${rf}██████${Bf}████                              ${Bf}██████${bf}██${Bf}████
        ${Bf}██████████████${wf}${ON}██${OFF}${cf}██${wf}${ON}██${OFF}${Bf}██                            ${Bf}██████${rf}██${Bf}████                                  ${Bf}██${bf}██████${Bf}██
                      ${Bf}██████                                ${Bf}██${wf}${ON}██${OFF}${rf}██${wf}${ON}██${OFF}${Bf}██                                    ${Bf}██████
                                                              ${Bf}██████
${reset}

EOF

}

function color_py(){
    python - $(echo "$@") <<END
"""2.2 John Eikenberry <jae@zhar.net> GPL-3+ http://zhar.net/projects/

Copyright
    Copyright (C) 2010-2013 John Eikenberry <jae@zhar.net>

License
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <http://www.gnu.org/licenses/>.

Description
    My goal in writing this script was to provide all the functionality of all
    the various perl/sh scripts found around the web in one place with some
    additional bells and whistles.

    It automatically detects 8, 16, 88, 256 color capabilities (via ncurses)
    and displays the appropriate color charts. It can display the colors as
    blocks or (2d) cubes optionally with color values overlaid in int or hex
    values.  It can show the full rgb text string as well. It can also show the
    display with a vertical (default) or horizontal orientation. It has the
    option of additional padding and supports -h --help as well.

    It also works as a utility for converting between 256 and 88 color values.

Development
    A note on coding style. I was playing around with using classes as simple
    module-esque namespaces; i.e. having classes that have all staticmethods
    and never get instatiated. As a side effect of this it makes calls at the
    module level thus this script is not really importable, thus limiting
    reuse.

Contributors
    Isaac Cammann <icammann@gmail.com> - cube display bugfix
    Jan Larres <jan@majutsushi.net> - submitted patches for..
        - compact rgb display
        - use of color intensity to determine foreground contrast color
        - 16 color SGR ANSI chart
        - 88 color rgb display bugfix

"""
from __future__ import print_function

__version__ = __doc__.split('\n')[0]

import sys
import curses
from optparse import OptionParser, OptionGroup, make_option
from math import ceil, sqrt
from functools import wraps

# output constants
fg_escape = "\x1b[38;5;%dm"
bg_escape = "\x1b[48;5;%dm"
clear = "\x1b[0m"

def _get_options(args):
    """ Setup and parse options.
    """
    option_list = [
        make_option("-b", "--block", action="store_true", dest="block",
            default=True, help="Display as block format (vs cube) [default]."),
        make_option("-c", "--cube-slice", action="store_true", dest="cube",
            default=False, help="Display as cube slices (vs block)."),
        make_option("-f", "--foreground", action="store_true",
            dest="foreground", default=False,
            help="Use color for foreground text."),
        make_option("-l", "--rgb", action="store_true", dest="rgb",
            default=False, help="Long format. RGB values as text."),
        make_option("-n", "--numbers", action="store_true", dest="numbers",
            default=False, help="Include color escape numbers on chart."),
        make_option("-o", "--basiccodes", action="store_true",
            dest="basiccodes", default=False,
            help="Display 16 color chart with SGR ANSI escape codes."),
        make_option("-p", "--padding", action="store_true", dest="padding",
            default=False, help="Add extra padding (helps discern colors)."),
        make_option("-v", "--vertical", action="store_true", dest="vertical",
            default=True, help="Display with vertical orientation [default]."),
        make_option("-x", "--hex", action="store_true", dest="hex",
            default=False, help="Include hex color numbers on chart."),
        make_option("-z", "--horizontal", action="store_true",
            dest="horizontal", default=False,
            help="Display with horizontal orientation."),
        ]

    parser = OptionParser(version=__version__, option_list=option_list)

    convert_option_list = [
        make_option("-r", "--256to88", action="store", dest="reduce",
            metavar="N", type="int",
            help="Convert (reduce) 256 color value N to an 88 color value."),
        make_option("-e", "--88to256", action="store", dest="expand",
            metavar="N", type="int",
            help="Convert (expand) 88 color value N to an 256 color value."),
        ]
    group = OptionGroup(parser, "Conversion options")
    group.add_options(option_list=convert_option_list)
    parser.add_option_group(group)

    (options, args) = parser.parse_args(args)
    return options

# instantiate global options based on command arguments
options = _get_options(sys.argv[1:])
# don't allow -f by itself
options.foreground = options.foreground and (
        options.numbers or options.hex or options.rgb )

class _staticmethods(type):
    """ Got tired of adding @staticmethod in front of every method.
    """
    def __new__(m, n, b, d):
        """ turn all methods in to staticmethods.
            staticmethod() deals correctly with class attributes.
        """
        for (n, f) in d.items():
            if callable(f):
                d[n] = staticmethod(f)
        return type.__new__(m, n, b, d)

def _cached(f):
    """ Memoize function w/ no params
    """
    _cache = {}
    def cache():
        if None not in _cache:
            _cache[None] = f()
        return _cache[None]
    return cache


class term16(object):
    """ Basic 16 color terminal.
    """
    __metaclass__ = _staticmethods

    def label(n, esc):
        """ color label for 256 color values
        """
        if options.numbers:
            return esc(n) + "%3d " % n
        elif options.hex:
            return esc(n) + " %2x " % n
        return esc(n) + "  "

    def _render():
        """ 16 color info
        """
        if options.foreground:
            esc = lambda n: fg_escape % n
        else:
            esc = lambda n: bg_escape % n + fg_escape % (15 if n < 9 else 0)
        return [[term16.label(n, esc) + clear for n in range(8)],
                [term16.label(n, esc) + clear for n in range(8,16)]]

    def basiccodes():
        text = "  gYw  "
        esc_code = "\x1b[%sm"
        print(' ' * 17 + '     '.join([str(40 + n) + "m" for n in range(8)]))
        fg_codes = ['0', '1']
        for i in range(30, 38):
            fg_codes.extend([str(i), "1;%d" % i])
        for fg in fg_codes:
            print("%5sm " % fg + esc_code % fg + text + clear + ' ', end='')
            print(' '.join([esc_code % fg + esc_code % bg + text + clear
                            for bg in range(40, 48)]))

    def display():
        """ display 16 color info
        """
        print("System colors:")
        colors = term16._render()
        padding='  ' if options.padding else ''
        for r in colors:
            print(padding.join(i for i in r))
            if options.padding: print()


class term256(term16):
    """ eg. xterm-256
    """

    @_cached
    def _rgb_lookup():
        """ color rgb lookup dict
        """
        # color increment is based on xterm/rxvt palette
        cincr = [0] + [95+40*n for n in range(5)]
        color_rgb = [rgb(i, j, k)
                for i in cincr for j in cincr for k in cincr]
        color_rgb = dict(zip(range(16, len(color_rgb)+16), color_rgb))
        greys = [rgb(*((n,)*3)) for n in range(8, 248, 10)]
        greys = dict(zip(range(232, 256), greys))
        color_rgb.update(greys)
        return color_rgb

    def _to_rgb(n):
        """ Convert color value to rgb tuple.
        """
        return term256._rgb_lookup()[n]

    def _rgb_color_table():
        """ 256 color info
        """
        rgbl = term256._rgb_lookup()
        label_num = "% 4d: "
        label_val = "%s"
        if options.foreground:
            render = lambda n: fg_escape % n + label_num % n + \
                    label_val % str(rgbl[n]) + clear
        else:
            render = lambda n: fg_escape % n + label_num % n + \
                    fg_escape % (16 if rgbl[n].is_light() else 255) \
                    + bg_escape % n + label_val % str(rgbl[n]) + clear
        return [[render(n) for n in [i+j for j in range(6)]]
                    for i in range(16, 256, 6)]

    def _rgb_display():
        """ display colors with rgb hex info
        """
        colors = term256._rgb_color_table()
        padding='  ' if options.padding else ''
        while colors:
            rows, colors = colors[:6], colors[6:]
            if not options.horizontal:
                rows = zip(*rows)
            for r in rows:
                print(padding.join(i for i in r))
                if options.padding: print()
            print()

    def _colors():
        """ 256 color numbers
        """
        return [[i+j for j in range(6)] for i in range(16, 232, 6)]

    def _greyscale():
        """ 256 greyscale numbers
        """
        return [[i+j for j in range(12)] for i in range(232, 256, 12)]

    def _render(palette):
        """ compact 256 color info
        """
        if options.foreground:
            esc = lambda n: fg_escape % n
            render = lambda n: term256.label(n, esc) + clear
        else:
            esc = lambda n: fg_escape % \
                    (16 if term256._to_rgb(n).is_light() else 255)
            render = lambda n: bg_escape % n + term256.label(n, esc) + clear
        return [[render(n) for n in i] for i in palette]

    def _compact_display():
        """ display colors in compact format
        """
        colors = term256._render(term256._colors())
        if options.cube:
            _cube_display(colors)
        elif options.block:
            _block_display(colors)
        print()
        greys = term256._render(term256._greyscale())
        padding='  ' if options.padding else ''
        for r in greys:
            print(padding.join(i for i in r))
            if options.padding: print()

    def display():
        """ display 256 color info (+ 16 in compact format)
        """
        if options.rgb:
            print("Xterm RGB values for 6x6x6 color cube and greyscale.")
            print()
            term256._rgb_display()
        else:
            term16.display()
            print()
            print("6x6x6 color cube and greyscale:")
            term256._compact_display()


class term88(term16):
    """ xterm-88 or urxvt
    """

    @_cached
    def _rgb_lookup():
        """ color rgb lookup dict
        """
        # color increment is based on rxvt palette
        cincr = [0, 0x8b, 0xcd, 0xff]
        color_rgb = [rgb(i, j, k)
                for i in cincr for j in cincr for k in cincr]
        color_rgb = dict(zip(range(16, len(color_rgb)+16), color_rgb))
        greys = [rgb(*((n,)*3))
                for n in [0x2e, 0x5c, 0x73, 0x8b, 0xa2, 0xb9, 0xd0, 0xe7]]
        greys = dict(zip(range(80, 88), greys))
        color_rgb.update(greys)
        return color_rgb

    def _to_rgb(n):
        """ Convert color value to rgb tuple.
        """
        return term88._rgb_lookup()[n]

    def _rgb_color_table():
        """ 88 color info
        """
        rgbl = term88._rgb_lookup()
        label_num = "% 4d: "
        label_val = "%s"
        if options.foreground:
            render = lambda n: fg_escape % n + label_num % n + \
                    label_val % str(rgbl[n]) + clear
        else:
            render = lambda n: fg_escape % n + label_num % n + \
                    fg_escape % (16 if rgbl[n].is_light() else 87) \
                    + bg_escape % n + label_val % str(rgbl[n]) + clear
        return [[render(n) for n in [i+j for j in range(4)]]
                    for i in range(16, 88, 4)]

    def _rgb_display():
        """ display colors with rgb hex info
        """
        colors = term88._rgb_color_table()
        while colors:
            rows, colors = colors[:4], colors[4:]
            for r in zip(*rows):
                print(''.join(i for i in r))
            print()

    def _render(palette):
        """ 88 color info
        """
        if options.foreground:
            esc = lambda n: fg_escape % n
            render = lambda n: term88.label(n, esc) + clear
        else:
            esc = lambda n: fg_escape % \
                    (16 if term88._to_rgb(n).is_light() else 87)
            render = lambda n: bg_escape % n + term88.label(n, esc) + clear
        return [[render(n) for n in i] for i in palette]
                #for n in [i+j for j in range(4)]]
                    #for i in range(16, 80, 4)]

    def _colors():
        """ 88 color numbers
        """
        return [[i+j for j in range(4)] for i in range(16, 80, 4)]

    def _greyscale():
        """ 88 greyscale numbers
        """
        return [range(80,88)]


    def display():
        """ display 16 + 88 color info
        """
        if options.rgb:
            print("Xterm RGB values for 4x4x4 color cube and greyscale.")
            print()
            term88._rgb_display()
        else:
            padding = '  ' if options.padding else ''
            term16.display()
            print()
            print("4x4x4 color cube and greyscale:")
            colors = term88._render(term88._colors())
            if options.cube:
                _cube_display(colors)
            elif options.block:
                _block_display(colors)
            print()
            greys  = term88._render(term88._greyscale())
            for r in greys:
                print(padding.join(i for i in r))

class rgb(tuple):
    """ An RGB, (red, green, blue) tuple. Takes integers.
    """
    def __new__(cls, r, g, b):
        """ We want 3 colors.
        """
        return super(rgb, cls).__new__(cls, (r,g,b))

    def __str__(self):
        """ Display in compact rgb format.
        """
        return "#%02x%02x%02x" % self

    def is_light(self):
        """ Is this color light (or dark).
        """
        red, green, blue = self[0], self[1], self[2]
        intensity = red*0.2126 + green*0.7152 + blue*0.0722
        return intensity > 127


def _cube_display(colors):
    """ Display color cube as color aligned flatten cube sides.
    """
    padding = '  ' if options.padding else ''
    if options.horizontal:
        def _horizontal(colors):
            size = int(sqrt(len(colors)))
            for n in (n*size for n in range(size)):
                colors[n:n+size] = zip(*colors[n:n+size])
            while colors:
                rows, colors = colors[:size*2], colors[size*2:]
                for n in range(size):
                    print(padding.join(i
                            for i in rows[n]+tuple(reversed(rows[n+size]))))
                    if options.padding: print(padding)
                if colors: print()
        _horizontal(colors)
    else: #options.vertical - default
        def _vertical(colors):
            size = int(sqrt(len(colors)))
            top = [colors[n:len(colors):size*2] for n in range(size)]
            bottom = [colors[n+size:len(colors):size*2]
                    for n in reversed(range(size))]
            for group in [top, bottom]:
                for rows in group:
                    for r in rows:
                        print(padding.join(i for i in r), end=' ')
                        if options.padding: print(padding, end=' ')
                    if options.padding: print()
                    print()
        _vertical(colors)

def _block_display(colors):
    """ Display color cube as cube sides organized by color #s (default).
    """
    padding = '  ' if options.padding else ''
    size = int(sqrt(len(colors)))
    if not options.horizontal:
        for n in (n*size for n in range(size)):
            colors[n:n+size] = zip(*colors[n:n+size])
    while colors:
        half = size*(size//2)
        rows, colors = colors[:half], colors[half:]
        for n in range(size):
            for r in rows[n:len(rows):size]:
                print(padding.join(i for i in r), end=' ')
                if options.padding: print(padding, end=' ')
            if options.padding: print()
            print()
        if colors: print()

def convert88to256(n):
    """ 88 (4x4x4) color cube to 256 (6x6x6) color cube values
    """
    if n < 16:
        return n
    elif n > 79:
        return 234 + (3 * (n - 80))
    else:
        def m(n):
            "0->0, 1->1, 2->3, 3->5"
            return n and n + n-1 or n
        b = n - 16
        x = b % 4
        y = (b // 4) % 4
        z = b // 16
        return 16 + m(x) + (6 * m(y) + 36 * m(z))

def convert256to88(n):
    """ 256 (6x6x6) color cube to 88 (4x4x4) color cube values
    """
    if n < 16:
        return n
    elif n > 231:
        if n < 234:
            return 0
        return 80 + ((n - 234) // 3)
    else:
        def m(n, _ratio=(4./6.)):
            if n < 2:
                return int(ceil(_ratio*n))
            else:
                return int(_ratio*n)
        b = n - 16
        x = b % 6
        y = (b // 6) % 6
        z = b // 36
        return 16 + m(x) + (4 * m(y) + 16 * m(z))

def _terminal():
    """ detect # of colors supported by terminal and return appropriate
        terminal class
    """
    curses.setupterm()
    num_colors = curses.tigetnum('colors')
    if num_colors > 0:
        return {16:term16, 88:term88, 256:term256}.get(num_colors, term16)

def main():
    if options.reduce:
        v = convert256to88(options.reduce)
        # reconvert back to display reduction in context
        print("%s (equivalent to 256 value: %s)" % (v, convert88to256(v)))
    elif options.expand:
        print(convert88to256(options.expand))
    else:
        term = _terminal()
        if term is None:
            print("Your terminal reports that it has no color support.")
        else:
            if options.basiccodes:
                print("Basic 16 color chart with SGR ANSI escape codes.\n")
                term16.basiccodes()
            else:
                term.display()

if __name__ == "__main__":
    main()

END
}

function show_help(){
echo "Show colorschemes.\n" \
"Options: \n" \
    "  -ref           reference\n" \
    "  -256           256colors\n" \
    "  -24            24bit\n" \
    "  -clrv          colorvalues\n" \
    "  -inv           invader\n" \
    "  -full          full_ansi\n" \
    "  -b1            blocks\n" \
    "  -b2            blocks2\n" \
    "  -fmt           colorformatting\n" \
    "  -pac           pacman\n" \
    "  -l1            list\n" \
    "  -l2            list '•••' \n" \
    "  -lslim         list '•' s \n" \
    "  -all           all\n" \
    "  -bar           bars\n" \
    "  -fn            fancy\n" \
    "  -tmux          tmux_pallete\n" \
    "  -spectr        spectrum\n" \
    "  -ls            ls_colors\n" \
    "  -ira           ira\n" \
    "  -skull         skulls\n" \
    "  -poke          poke\n" \
    "  -ill           illuminate\n" \
    "  -puke          pukeskull\n" \
    "  -cr            crunchbang_mini\n" \
    "  -tspctrm       tiny_spectrum\n" \
    "  -py            embedded color.py\n" \
    "  --help         show this help\n"
}

case "${1}" in
    -ref) reference           ;;
    -256) 256colors           ;;
    -24) 24bit                ;;
    -clrv) colorvalues        ;;
    -inv) invader             ;;
    -full) full_ansi          ;;
    -b1) blocks               ;;
    -b2) blocks2              ;;
    -fmt) colorformatting     ;;
    -pac) pacman              ;;
    -l1) list                 ;;
    -l2) list '•••'           ;;
    -lslim) list '•' "s"      ;;
    -all) all                 ;;
    -bar) bars                ;;
    -fn) fancy                ;;
    -tmux) tmux_pallete       ;;
    -spectr) spectrum         ;;
    -ls) ls_colors            ;;
    -ira) ira                 ;;
    -skull) skulls            ;;
    -poke) poke               ;;
    -ill) illuminate          ;;
    -puke) pukeskull          ;;
    -cr) crunchbang_mini      ;;
    -tspctrm) tiny_spectrum   ;;
    -py) shift; color_py "$@" ;;
    -h) show_help             ;;
    --help) show_help         ;;
esac
