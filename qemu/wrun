#!/bin/zsh

# Script to run windows 10 with geforce 980gtx gpu ;)
function haltcmd(){
    haltcmd="echo '{ \"execute\": \"qmp_capabilities\" }{ \"execute\": \"system_powerdown\"}' | nc localhost 4444 && \
    sleep 9;\
    echo '{ \"execute\": \"qmp_capabilities\" }{ \"execute\": \"system_powerdown\"}' | nc localhost 4444 && \
    sleep 1;\
    echo '{ \"execute\": \"qmp_capabilities\" }{ \"execute\": \"system_powerdown\"}' | nc localhost 4444"
    eval "${haltcmd}"
}

function zshexit(){
    [[ ${qemu_run_success} == true ]] && finish
}

function qemu::msg(){
    echo "QEMU :: [$@]"
    notify-send "QEMU :: [$@]"
}

function finish(){
    # Restore settings
    killall synergy 2>/dev/null      # Kill synergy client
    sudo sysctl -w vm.nr_hugepages=0 # Revert hugepages count to 0(zero)
    
    # kill st - dtach window
    ps aux | grep 'dtach -c /tmp/qemu_wrun.session' | awk '{print $2}' | xargs kill

    while [[ $(xinput | grep 'Logitech Gaming Keyboard G910' | wc -l) == 0 ]]; do
        echo 'wait for the keyboard'
        sleep 1s
    done

    setxkbmap \
        -option keypad:pointerkeys \
        -layout 'us,ru' \
        -option 'grp:alt_shift_toggle' \
        -variant altgr-intl \
        -option ctrl:nocaps

    xset m 0 0            # Revert mouse settings
    xset -b r rate 250 50 # Revert keyboard rate

    stig start all
}

function main(){
    qemu_run_success=false
    [[ $(id -u) != "0" ]] && qemu::msg "You should run it from root" && exit 0

    zmodload -aF zsh/system b:zsystem
    lockfile="$(readlink -f ~neg/tmp/)$(basename $0).lock"

    if [[ -f ${lockfile} ]]; then
        if pgrep qemu 2>/dev/null; then
            qemu::msg "There is lockfile in [${lockfile}]"
            exit 1
        else
            sudo rm -v "${lockfile}"
        fi
    fi

    touch "${lockfile}"
    (
        if zsystem flock -r "${lockfile}"; then
        qemu::msg "Locking to [${lockfile}] qemu_run_success" >&2

        local user_=neg
        local home_=/home/${user_}
        local disk_name="w10"
        local win10_iso="${home_}/1st_level/iso/en_windows_10_education_version_1607_updated_jul_2016_x64_dvd_9055880.iso"
        local virtio_iso="${home_}/1st_level/iso/virtio-win-0.1.137.iso"
        local smb_path="/mnt/qemu"
        local qmp_socket_path="${home_}/1st_level/qmp.socket"
        local qmp_sh_script="${home_}/bin/scripts/qmp/qmp-shell"
        local install_iso="${win10_iso}"

        local amount_of_mem_="$(free -m|awk '/Mem/{print $2}')"
        local log_="$(builtin print "l(${amount_of_mem_})/l(2)" | bc -l)"
        local mem_="$(builtin print "(${log_}+0.5)/1" | bc)"
        local vm_memory="$(builtin print "2^${mem_}/2.0" | bc -l | xargs printf "%1.0f")"
        local hugepagesize="$(awk '/Hugepagesize/{print $2}' /proc/meminfo)"
        local hugepages_amount=$(printf '%.0f00\n' "$[${vm_memory}*1024./${hugepagesize}*1.075/100]")

        local lscpu_info=("$(lscpu)")
        local sockets_amount_="$(awk -F: '/Socket/{print $2}'     <<< ${lscpu_info[@]} | tr -d '[:space:]')"
        local cores_amount_="$(awk -F:   '/per socket/{print $2}' <<< ${lscpu_info[@]} | tr -d '[:space:]')"
        local threads_amount_="$(awk -F: '/Thread/{print $2}'     <<< ${lscpu_info[@]} | tr -d '[:space:]')"

        local qemu_bypass_network=true
        local dynamic_usb_bypass=true
        local auto_usb_bypass=false
        local usb_bypass_timeout=40
        local -a qemu_network=()

        local -a qemu_params=(
            -enable-kvm
            -m "${vm_memory}"
            -smp sockets="${sockets_amount_}",cores="${cores_amount_}",threads="${threads_amount_}"
            -cpu host,kvm=off
            -device virtio-scsi-pci,id=scsi
            -drive if=pflash,format=raw,readonly,file=${home_}/bin/qemu/ovmf_code_x64.bin
            -drive if=pflash,format=raw,file=${home_}/bin/qemu/ovmf_vars_x64.bin
            -drive format=raw,file=/dev/mapper/root-qemu,id=disk,if=none,aio=threads,cache=none -device scsi-hd,drive=disk
        )

        local -a qemu_consoles=(
            -balloon none # Windows wont support it and kvm too, anyway
            -qmp tcp:localhost:4444,server,nowait
        )

        local -a qemu_source_params=(
            -drive file="${install_iso},index=0,media=cdrom"
            -drive file="${virtio_iso},index=1,media=cdrom"
            -boot menu=on
        )

        local -a qemu_nographic=(
            -vga none
        )

        local -a qemu_vga_spice=(
            -vga qxl -spice port=5900,addr=127.0.0.1,disable-ticketing
        )

        local -a qemu_pass_video=(
            -device vfio-pci,host=01:00.0,multifunction=on
            -device vfio-pci,host=01:00.1
        )

        local -a qemu_pass_video_rom=(
            -device vfio-pci,host=01:00.0,multifunction=on,rombar=0,romfile=/home/neg/bin/qemu/bios.bin
            -device vfio-pci,host=01:00.1,rombar=0,romfile=/home/neg/bin/qemu/bios.bin
        )


        local -a qemu_pass_network=(
            -net none
            -device vfio-pci,host=00:19.0
        )

        local -a qemu_pass_input=()
        if [[ ${dynamic_usb_bypass} == true ]]; then
            modprobe ohci-hcd 2> /dev/null
            modprobe ohci-pci 2> /dev/null

            qemu_pass_input=(
                -usb
                -device nec-usb-xhci,id=xhci_defaults0
                -device nec-usb-xhci,id=xhci_defaults1
                -device nec-usb-xhci,id=xhci
                -device ich9-usb-uhci1,id=uhci
                -device usb-ehci,id=ehci
            )
        else
            qemu_pass_input=(
                -usbdevice host:046d:c083 # G403 Prodigy Gaming Mouse
                -usbdevice host:046d:c32b # Logitech G910 [Keyboard]
            )
            # -usb
            # -usbdevice host:1038:1702 # SteelSeries ApS [ Mouse ]
            # -usbdevice host:046d:c32b # Logitech G910 [Keyboard]
            # -usbdevice host:1e7d:2e22 # Roccat kone rtd [ Mouse ]
            # -usbdevice host:1038:1702 # SteelSeries ApS [ Mouse ]
        fi

        local -a qemu_emulated_sound=(
            -soundhw ac97
        )

        local -a qemu_share=(
            -net nic -net user,smb="${smb_path}"
        )

        local -a qemu_qmp_socket_console=(
            -qmp unix:"${qmp_socket_path}",server --monitor stdio \
            "${qmp_sh_script}" "${qmp_socket_path}"
        )

        local -a qemu_default_network=(
            -net nic -net tap,ifname=tap0,script=/home/neg/bin/qemu/qemu-ifup,downscript=/home/neg/bin/qemu/qemu-ifdown
        )

        local -a qemu_hugepages_stuff=(
            -mem-prealloc 
            -mem-path /dev/hugepages
        )

        # Disable torrents
        stig stop all 2> /dev/null

        if [[ ! $(pidof synergyc) && $(hash synergy 2> /dev/null) ]]; then
            sudo -u neg "synergy" 2>&1 > /dev/null &! \
                qemu::msg "Autostart synergy"
        fi

        if [[ ${qemu_bypass_network} == true ]]; then
            sudo ~neg/bin/qemu/vfio_binder "0000:00:19.0"
            for arg in ${qemu_pass_network[@]}; qemu_network+="${arg}"
        else
            for arg in ${qemu_default_network[@]}; qemu_network+="${arg}"
        fi

        # Compact memory for hugepages
        echo 1 > /proc/sys/vm/compact_memory

        # Setup hugepages
        sudo sysctl -w vm.nr_hugepages="${hugepages_amount}" 2> /dev/null

        if [[ ${dynamic_usb_bypass} == true && ${auto_usb_bypass} == true ]]; then
            {
                qemu::msg "Bypass usb devices automatically, after ${usb_bypass_timeout} seconds"
                sleep ${usb_bypass_timeout}
                sudo ~neg/bin/qemu/usb-passthrough.sh add all || qemu::msg 'Usb bypass failed'
            } &
        fi

        sudo systemctl start {ssh,smb}d

        QEMU_AUDIO_TIMER_PERIOD=150 \
        QEMU_PA_SAMPLES=1024 \
        QEMU_PA_SERVER=localhost \
        PULSE_SERVER=localhost \
        QEMU_AUDIO_DRV=pa \
        qemu-system-x86_64 "${qemu_params[@]}" \
            "${qemu_nographic[@]}" \
            "${qemu_emulated_sound[@]}" \
            "${qemu_pass_video[@]}" \
            "${qemu_pass_input[@]}" \
            "${qemu_network[@]}" \
            "${qemu_hugepages_stuff[@]}" \
            "${qemu_consoles[@]}"
        fi

        qemu_run_success=true
        trap finish EXIT TERM KILL
    ) &
    sudo rm -v "${lockfile}"

    dummy_var=""
    while read dummy_var; do :; done
}

main "$@"
