#!/bin/zsh

summary="$2"
body="$3"
urgency="$5"

dunst_pics="/tmp/dunst-images"
cover_lock="${dunst_pics}/notify.lock"
image="/tmp/.mpd-notification-artwork.png"

function wf(){
    print "${col1}⟬${end}${bold}$1${end}${col1}⟭${end} "
}

function get_pid(){
    local mpdsc="$(which mpdscribble) --conf"
    local mpdas="${XDG_CONFIG_HOME}/mpdas"
    pgrep -f "${mpdsc} ${XDG_CONFIG_HOME}/mpdscribble/${1}.conf --no-daemon" || \
    pgrep -f "${mpdas}/${1}.rc"
}

function get_lastfm(){
    for pid in neg hextrick; do
        if [[ $(get_pid "${pid}") != "" ]]; then
            printf "%s\n" "$(wf "L")$(sed 's:^.:\U&:g' <<< ${pid}) last.fm"
            break
        fi
    done
}

function highlight(){
    local msg="$(xrq color${1})"
    print "<span weight='bold' color='${msg}'>"
}

function notify(){ 
    local col1=$(highlight 12)
    local col2=$(highlight 8)

    local end="</span>"
    local bold="<span weight='bold'>"
    declare -a bodyarr
    while read line; do
        bodyarr+="${line}"
    done <<< ${body}

    len=()
    for i in {1..6}; len+=${#bodyarr[$i]};
    len=($(printf "%s\n" "${len[@]}"|sort -nr))

    max_len=35
    len=$[${(@)len[1]}]
    [[ ${len} > ${max_len} ]] && len=${max_len}

    fancy_table=('' '♫' '⟫' '')

    for i in {1..$#fancy_table}; do
        if [[ ${bodyarr[i]} != "" ]]; then
            bodyarr[i]=$(wf $fancy_table[i])"${bodyarr[i]}\n"
        else
            bodyarr[i]="\n"
        fi
    done

    local current_file="$(mpc -f '%file%'|head -1)"
    local mpd_music_dir="$(awk '/music_directory/{print $2}' /etc/mpd.conf|tr -d '"')"
    local current_dirname="${mpd_music_dir}/$(dirname "${current_file}")"

    albumdetails_metadata="$(find "${current_dirname}" -exec albumdetails '{}' + 2>&1 >/dev/null \
        | awk -F ': ' '/Quality/{print $2}' \
        | sed -e 's; / ;·;g' -e 's; channels;;')"
    sox_metadata="$(sox --i "${mpd_music_dir}/${current_file}" 2> /dev/null)"
    if [[ ! -z "${sox_metadata// }" ]]; then
        media_file_encoding="$(awk -F': ' '/Sample Encoding/{print $2}' <<< "${sox_metadata}")"
        case "${media_file_encoding}" in
            *FLAC*) file_enc="flac" ;;
            *MPEG*) file_enc="mp3" ;;
        esac
        file_enc="${file_enc}:$(awk -F': ' '/Precision/{print $2}' <<< ${sox_metadata})"
    fi

    [[ ${file_enc// } != "" ]] && \
        bodyarr[5]=$(wf '')"${file_enc}\n" || \
        bodyarr[5]="\n"
    [[ ${albumdetails_metadata// } != "" ]] && \
        bodyarr[6]=$(wf '')"${albumdetails_metadata}\n" || \
        bodyarr[6]="\n"

    local output
    for i in ${bodyarr[@]}; [[ ${i} != "\n" ]] && output="${output}${i}"

    summary=$'\n'"${col2}$(repeat ${len} print -n "◇")${end}"
    output="\n${output}$(get_lastfm)\n\n${summary}"

    notify-send -h "string:fgcolor:#8DA6C4" -a "mpd_notification" -u "${urgency}" -i "${image}" "${summary}" "${output}"
    echo "${body}$(get_lastfm)" > "${cover_lock}"
}

function cmp_img(){ 
    ${HOME}/bin/scripts/compare_images.py "$1" "$2" \
        || print "False"
}

function show_notify(){
    if [[ ! -f "${cover_lock}" ]]; then
        notify
    elif [[ -s "${cover_lock}" ]]; then
        if [[ "$(cat "${cover_lock}")" != "${body}$(get_lastfm)" ]]; then
            notify
        fi
    fi
    cp "${image}" "${prev}"
}

function zshexit(){
    (   
        hashsum1=$(sha384sum "${image}"|awk '{print $1}')
        sleep 4s;
        hashsum2=$(sha384sum "${image}"|awk '{print $1}')
        [[ ${hashsum1} = ${hashsum2} ]] && rm ${image}
    ) &
}

function main(){
    dunst_x11_class="$(< ${XDG_CONFIG_HOME}/dunst/dunstrc awk -F '=' '/class/{print $2}'|tr -d '[[:space:]]')"
    # force dunst to cleanup notification query
    while [[ $(xdotool search --onlyvisible --class "${dunst_x11_class}") != "" ]]; do
        xdotool search --onlyvisible --class "${dunst_x11_class}" \
            | xargs -I{} dash -c 'xdotool key "Super+space"'
    done

    [[ ! -d "${dunst_pics}" ]] && mkdir -p "${dunst_pics}"
    prev="${dunst_pics}/prev.png"

    find "${dunst_pics}" -name prev.png -not -newermt '-900 seconds' -delete
    if [[ -f ${image} ]]; then
        [[ ! -d "${dunst_pics}" ]] && mkdir -p "${dunst_pics}" 

        # send notification with compatible image
        if [[ ! -f "${prev}" ]]; then
            show_notify
        else
            local dunst_picslist_=$(setopt nullglob dotglob; print "${dunst_pics}"/*)
            local cmp_result="$(cmp_img ${image} "${prev}")"
            if [[ ${cmp_result} == "False" ]] \
            && [[ ${#dunst_picslist_[@]} -gt 1 ]]; then
                show_notify
            fi
        fi
    fi
}

main "$@"
