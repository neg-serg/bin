#!/bin/zsh

summary_="$2" body_="$3" urgency_="$5"

dunst_pics_="/tmp/dunst-images"
cover_lock="${dunst_pics_}/notify.lock"
image_="/tmp/.mpd-notification-artwork.png"

function wf_(){
    builtin print "${st_}[${cl_}${bold_}$1${cl_}${st_}]${cl_} "
}

function get_pid_(){
    local mpdsc_="$(which mpdscribble) --conf"
    local mpdas_="${XDG_CONFIG_HOME}/mpdas"
    pgrep -f "${mpdsc_} ${XDG_CONFIG_HOME}/mpdscribble/$1.conf --no-daemon" || \
    pgrep -f "${mpdas_}/$1.rc"
}

function get_lastfm_(){
    for pid_ in neg hextrick; do
        if [[ $(get_pid_ "${pid_}") != "" ]]; then
            builtin printf "%s\n" "$(wf_ "L")$(sed 's:^.:\U&:g' <<< ${pid_}) last.fm"
            break
        fi
    done
}

function highlight_(){
    local msg="$(xrq color$1)"
    builtin print "<span weight='bold' color='${msg}'>"
}

function send_notify_(){ 
    local st_=$(highlight_ 4)
    local st2_=$(highlight_ 8)

    local cl_="</span>"
    local bold_="<span weight='bold'>"
    local prefix_=$(wf_ "➣")
    declare -a bodyarr_
    while read line; do
        bodyarr_+="${line}"
    done <<< ${body_}

    length_=()
    for i in {1..6}; length_+=${#bodyarr_[$i]};
    length_=($(printf "%s\n" "${length_[@]}"|sort -nr))

    max_length_=35
    length_=$[${(@)length_[1]}]
    [[ ${length_} > ${max_length_} ]] && length_=${max_length_}

    fancy_table_=('' '♫' '⟫' '')

    for i in {1..$#fancy_table_}; do
        if [[ ${bodyarr_[i]} != "" ]]; then
            bodyarr_[i]=$(wf_ $fancy_table_[i])"${bodyarr_[i]}\n"
        else
            bodyarr_[i]="\n"
        fi
    done

    current_file="$(mpc -f '%file%'|head -1)"
    mpd_music_dir="$(awk '/music_directory/{print $2}' /etc/mpd.conf|tr -d '"')"
    current_dirname="${mpd_music_dir}/$(dirname "${current_file}")"

    albumdetails_metadata="$(find "${current_dirname}" -exec albumdetails '{}' + 2>&1 >/dev/null \
        | awk -F ': ' '/Quality/{print $2}' \
        | sed -e 's; / ;·;g' -e 's; channels;;')"
    sox_metadata="$(sox --i "${mpd_music_dir}/${current_file}" 2> /dev/null)"
    if [[ ! -z "${sox_metadata// }" ]]; then
        media_file_encoding="$(awk -F': ' '/Sample Encoding/{print $2}' <<< "${sox_metadata}")"

        case "${media_file_encoding}" in
            *FLAC*) file_enc="flac" ;;
            *MPEG*) file_enc="mp3" ;;
        esac
        file_enc="${file_enc}:$(awk -F': ' '/Precision/{print $2}' <<< ${sox_metadata})"
    fi

    [[ ${file_enc// } != "" ]] && \
        bodyarr_[5]=$(wf_ '')"${file_enc}\n" || \
        bodyarr_[5]="\n"
    [[ ${albumdetails_metadata// } != "" ]] && \
        bodyarr_[6]=$(wf_ '')"${albumdetails_metadata}\n" || \
        bodyarr_[6]="\n"

    local output
    for i in ${bodyarr_[@]}; [[ ${i} != "\n" ]] && output="${output}${i}"

    summary_=$'\n'"${st2_}$(repeat ${length_} builtin print -n "◇")${cl_}"
    output="\n${output}$(get_lastfm_)\n\n${summary_}"

    notify-send -a "mpd_notification" -u "${urgency_}" -i "${image_}" "${summary_}" "${output}"
    echo "${body_}$(get_lastfm_)" > "${cover_lock}"
}

function compare_images_(){ 
    ${HOME}/bin/scripts/compare_images.py "$1" "$2" \
        || builtin print "False"
}

function send_notify(){
    if [[ ! -f "${cover_lock}" ]]; then
        send_notify_
    elif [[ -s "${cover_lock}" ]]; then
        if [[ "$(cat "${cover_lock}")" != "${body_}$(get_lastfm_)" ]]; then
            send_notify_
        fi
    fi
    cp "${image_}" "${prev_}"
}

function zshexit(){
    (   
        hashsum1=$(sha384sum "${image_}"|awk '{print $1}')
        sleep 4s;
        hashsum2=$(sha384sum "${image_}"|awk '{print $1}')
        [[ ${hashsum1} = ${hashsum2} ]] && rm ${image_}
    ) &
}

function main(){
    dunst_x11_class="$(< ${XDG_CONFIG_HOME}/dunst/dunstrc awk -F '=' '/class/{print $2}'|tr -d '[[:space:]]')"
    # force dunst to cleanup notification query
    while [[ $(xdotool search --onlyvisible --class "${dunst_x11_class}") != "" ]]; do
        xdotool search --onlyvisible --class "${dunst_x11_class}" \
            | xargs -I{} dash -c 'xdotool key "Super+space"'
    done

    [[ ! -d "${dunst_pics_}" ]] && mkdir -p "${dunst_pics_}"
    prev_="${dunst_pics_}/prev.png"

    find "${dunst_pics_}" -name prev.png -not -newermt '-900 seconds' -delete

    if [[ -f ${image_} ]]; then
        [[ ! -d "${dunst_pics_}" ]] && mkdir -p "${dunst_pics_}" 

        # send notification with compatible image
        if [[ ! -f "${prev_}" ]]; then
            send_notify
        else
            local dunst_pics_list_=$(setopt nullglob dotglob; builtin print "${dunst_pics_}"/*)
            local cmp_result="$(compare_images_ ${image_} "${prev_}")"
            if [[ ${cmp_result} == "False" ]] \
            && [[ ${#dunst_pics_list_[@]} -gt 1 ]]; then
                send_notify
            fi
        fi
    fi
}

main "$@"
