#!/bin/zsh

extract(){
    local remove_archive
    local success
    local file_name
    local extract_dir
    remove_archive=1
    if [[ "$1" == "-r" ]] || [[ "$1" == "--remove" ]]; then
        remove_archive=0
        shift
    fi
    while (( $# > 0 )); do
            if [[ ! -f "$1" ]]; then
                echo "extract: '$1' is not a valid file" >&2
                shift
                continue
            fi
            success=0
            file_name="$( basename "$1" )"
            extract_dir="$( echo "${file_name}" | sed "s/\.${1##*.}//g" )"
            case "${1}" in
                (*.tar.gz|*.tgz) [ -z ${commands}[pigz] ] && tar zxvf "${1}" || pigz -dc "${1}" | tar xv ;;
                (*.tar.bz2|*.tbz|*.tbz2) tar xvjf "${1}" ;;
                (*.tar.xz|*.txz) tar --xz --help &> /dev/null && tar --xz -xvf "${1}" || xzcat "${1}" | tar xvf - ;;
                (*.tar.zma|*.tlz) tar --lzma --help &> /dev/null && tar --lzma -xvf "${1}" || lzcat "${1}" | tar xvf - ;;
                (*.tar) tar xvf "${1}" ;;
                (*.gz) [ -z ${commands}[pigz] ] && gunzip "${1}" || pigz -d "${1}" ;;
                (*.bz2) bunzip2 "${1}" ;;
                (*.xz) unxz "${1}" ;;
                (*.lzma) unlzma "${1}" ;;
                (*.Z) uncompress "${1}" ;;
                (*.zip|*.war|*.jar|*.sublime-package) unzip "${1}" -d ${extract_dir} ;;
                (*.rar) unrar x -ad "${1}" ;;
                (*.7z) 7za x "${1}" ;;
                (*.deb) mkdir -p "${extract_dir}/control"
                        mkdir -p "${extract_dir}/data"
                        cd "$extract_dir"
                        ar vx "../${1}" > /dev/null
                        cd control
                        tar xzvf ../control.tar.gz
                        cd ../data
                        tar xzvf ../data.tar.gz
                        cd ..
                        rm *.tar.gz debian-binary
                        cd .. ;;
                (*) echo "extract: '${1}' cannot be extracted" >&2
                        success=1  ;;
            esac
            (( success = ${success} > 0 ? ${success} : $? ))
            (( ${success} == 0 )) && (( ${remove_archive} == 0 )) && rm "$1"
            shift
    done
}

handle_archive(){
    cd "$1"
    mkdir "${1%.*}"
    extract --remove ./*
}

main(){
    case "$1" in
        c*) 
            shift
            # Transmission-related stuff
            inotifywait -m -q -e close --format "%f" ${XDG_DOWNLOAD_DIR}/ \
            | while IFS= read -r file_; do
                file=$(readlink -f ${XDG_DOWNLOAD_DIR}/${file_})
                if [[ "${file}" =~ ".torrent.added"$ ]]; then
                    mv "${file}" "$(readlink -f ${HOME}/tmp/)"
                    send_notify
                fi
            done
        ;;
        s*)
            shift

            local dw="$(readlink -f ${HOME}/dw/)"
            local doc="$(readlink -f ${HOME}/doc/new/)"
            local vid="$(readlink -f ${HOME}/vid/new/)"

            rmdir ${dw}/{img,archive} 2> /dev/null&
            mkdir ${dw}/{img,archive} 2> /dev/null&

            find ${dw}/ -maxdepth 1 -name "*.iso" \
                -exec mv -n -t ${dw}/img {} +
            find ${dw}/ -maxdepth 1 -regextype posix-egrep -regex \
                ".*\.(zip|7z|rar|gz|xz|bz2|tgz|tar.*)$" -exec mv -vnt ${dw}/archive {} +
            find ${dw}/ -maxdepth 1 -regextype posix-egrep -regex \
                ".*\.(pdf|ps|djvu|txt|doc|docx|fb2|epub|rtf)$" -exec mv -vnt ${doc}/ {} +
            find ${dw}/ -maxdepth 1 -regextype posix-egrep -regex \
                ".*\.(flv|mp4|avi|mkv|mov|webm|wmv)$" -exec mv -vnt ${vid}/ {} +
            find ${dw}/ -maxdepth 1 -regextype posix-egrep -regex \
                ".*\.(mp3|ogg|flac|wma|flac|alac|dsf|dsd)$" -exec mv -vnt ${dw}/aud {} +

            handle_archive ${dw}/archive

            rmdir ${dw}/{img,archive} 2> /dev/null&
        ;;
    esac
}

hi(){
    local msg="$(xrq color$1)"
    builtin print "<span weight='bold' color='${msg}'>"
}

st=$(hi 4)
cl="</span>"
bold="<span weight='bold'>"

wf(){
    builtin print "${st}⟬${cl}${bold}$1${cl}${st}⟭${cl}"
}

send_notify(){ 
    notify-send -h "string:fgcolor:$(xrq foreground)" "$(wf "mv")$(wf "${file}")->$(wf ${HOME}/tmp)"
}

main "$@"
