#!/usr/bin/env python3

""" nwim runner

 _ ____      _(_)_ __ ___
| '_ \ \ /\ / / | '_ ` _ \
| | | \ V  V /| | | | | | |
|_| |_|\_/\_/ |_|_| |_| |_|

Usage:
  nwim.py

Options:
  -h --help     Show this screen.
  --version     Show version.

Created by :: Neg
email :: <serg.zorg@gmail.com>
github :: https://github.com/neg-serg?tab=repositories
year :: 2019

"""

import subprocess
import sys
import time
import os.path
import shlex
from pathlib import Path
from pretty_printer import file_info_printer


class wim_runner(object):
    """ wim runner with only one instance """

    def __init__(self):
        self.settings = {
            "debug": False,
        }

        self.args = sys.argv
        self.vim_commands = {
            "to_normal": "<C-\\><C-N>:call<SPACE>foreground()<CR>",
            "dir": "-c 'doautocmd BufEnter'",
            "rsend": " --remote-send ",
            "rwait": " --remote-tab-wait ",
        }

        self.default_cmd = self.vim_commands["rsend"]
        self.timeout = .5
        self.cmd = ""
        self.wim_name = "nwim"
        self.printer = file_info_printer()
        self.mode = ""

    def dprint(self, debug_string):
        """ Debug printing """
        if self.settings["debug"]:
            print(debug_string)

    def dprint_with_args(self, debug_string):
        """ Debug printing with args """
        def print_args(args):
            self.dprint("[::] Printing args [::]")
            for arg in args:
                self.dprint("{ " + arg + " }")

        self.dprint("[ " + debug_string + " ]")
        print_args(self.args)

    def no_wim_x11_win(self):
        """ Checks for the X11 window """
        nwim_win = subprocess.Popen(
            "wmctrl -xl|awk '{print $3}'|rg nwim",
            stdin=None,
            shell=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.DEVNULL,
        )
        our, _ = nwim_win.communicate()
        return our.decode().strip('\n') != "nwim.nwim"

    def wim_goto(self):
        """ Goto to the neovim window """
        def there_is(wm_):
            if "DISPLAY" not in os.environ:
                return False

            pipe = subprocess.Popen(
                'pidof {}'.format(wm_).split(), stdout=subprocess.PIPE
            )
            pid, _ = pipe.communicate()
            return pid != b''

        if there_is("i3"):
            self.dprint("[i3] :: go to win with it")
            subprocess.Popen(
                ["i3-msg", '[instance={}]'.format(self.wim_name), "focus"],
                stdout=open(os.devnull, 'w'),
                stderr=open(os.devnull, 'w')
            )

    def wim_is_started(self):
        """ Check wim started or not by internal variable in nvim """
        ret = subprocess.Popen(
            shlex.split(
                """ nvr --remote-expr "printf(\\"%s\\", g:nvim_is_started)" """
            ),
            stdout=subprocess.PIPE,
            stderr=subprocess.DEVNULL
        ).communicate()[0].decode("utf-8").strip('\n')
        self.dprint("nwim_started=[{}]".format(ret))
        return ret == "on"

    def wait_for_run(self):
        """ Wait while nvim nwim is run """
        while not self.nwim_wid():
            self.dprint("wait st from scratch run")
            time.sleep(self.timeout)
        while not self.wim_is_started():
            self.dprint("wait for nvim")
            time.sleep(self.timeout)

    def quotestr(self, string):
        """ It seems that only bash quoting works correctly
            Probably this stuff should be replaced with encodef and friends
        """
        quoted_string = subprocess.Popen(
            shlex.split("bash -c \"printf %q '" + string + "'\""),
            stdout=subprocess.PIPE,
            stderr=subprocess.DEVNULL
        ).communicate()[0].decode("utf-8").strip('\n')
        return quoted_string

    def vim_file_open(self, line, edit_file=True):
        """ Open file in daemon and print nice file info
            Main function with several closures """
        def remote_edit_file(filename, file):
            # helper for remote_send
            def remote_edit_file_():
                self.dprint("[remote edit file]")
                ret = subprocess.Popen(
                    shlex.split(
                        "nvr " + prefix_cmd + self.default_cmd +
                        "\"" +
                        self.vim_commands["to_normal"] +
                        ":silent edit " +
                        self.quotestr(filename) +
                        "<CR>" +
                        self.cmd +
                        "\""
                    ),
                    stdout=subprocess.PIPE,
                    stderr=subprocess.DEVNULL
                )
                return ret

            prefix_cmd = ""
            if file.is_dir():
                prefix_cmd += self.vim_commands["dir"]

            self.dprint("[remote send]")
            if remote_edit_file_().returncode != 0:
                remote_edit_file_()

        try:
            filename = os.path.normpath(os.path.realpath(line))
            file = Path(filename)  # normalize path
            if edit_file:
                # Open target file / dir
                remote_edit_file(filename, file)

            if not file.exists():
                self.printer.nonexistsfile(filename)
            elif file.is_file() and not file.is_dir():
                self.printer.existsfile(filename)
            elif file.is_dir():
                if filename == os.getcwd():
                    self.printer.currentdir(filename)
                else:
                    self.printer.dir(filename)
        except Exception:
            pass

    def process_list(self):
        """ Process list of files """
        self.wim_goto()

        self.cmd = self.vim_commands["to_normal"]

        if self.cmd == self.vim_commands["to_normal"]:
            for line in self.args:
                self.vim_file_open(line)
        else:
            subprocess.Popen(
                shlex.split("nvr " + self.default_cmd + self.cmd),
                stdout=subprocess.PIPE
            )

            for line in self.args:
                self.vim_file_open(line)

    def eprocess_list(self):
        """ Process list of files for embedded """
        for line in self.args:
            self.cmd = "nvr " + self.default_cmd + line
            subprocess.call(shlex.split(self.cmd))

    def wim_run(self):
        """ Run command """
        if self.mode == "default":
            proc = self.process_list
        elif self.mode == "embedded":
            self.default_cmd = self.vim_commands["rwait"]
            proc = self.eprocess_list

        if self.args:
            proc()

    def nwim_wid(self):
        """ Search for nwim wid """
        return subprocess.Popen(
            'xdotool search --classname {}'.format(self.wim_name).split(),
            stdout=subprocess.PIPE, stderr=subprocess.PIPE
        ).communicate()[0].decode("utf-8").strip('\n')

    def nvr_for_oni(self):
        """ Starts nvr for oni """
        subprocess.run(
            ["nvr", "--remote-silent"] + sys.argv[1:],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL
        )

        for line in sys.argv[1:]:
            self.vim_file_open(line, edit_file=False)

    def switch_to_oni_window(self):
        """ Switch to the oni window """
        subprocess.Popen(
            [
                os.environ["XDG_CONFIG_HOME"] + "/i3/send",
                "circle", "next", "nwim"
            ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL
        )

    def spawn_oni(self):
        """ Spawn oni process """
        subprocess.Popen(
            ["i3-msg", "exec", "oni"],
            stdout=subprocess.PIPE,
            stderr=subprocess.DEVNULL
        )

    def wait_for_oni(self):
        """ Wait for the oni process to run """
        out = subprocess.check_output(['pgrep', '-f', '/opt/oni/oni']) \
            .decode('UTF-8').strip('\n')
        while not out:
            out = subprocess.check_output(['pgrep', '-f', '/opt/oni/oni']) \
                .decode('UTF-8').strip('\n')
            time.sleep(self.timeout)

    def wait_for_nvr(self):
        """ Wait for the nvr to run """
        counter = 0
        nvim_server_is_here = subprocess.Popen(
            ['nvr', '--serverlist'],
            stdout=subprocess.PIPE,
            stderr=subprocess.DEVNULL
        ).communicate()[0].decode('UTF-8').strip('\n')

        while not nvim_server_is_here:
            nvim_server_is_here = subprocess.Popen(
                ['nvr', '--serverlist'],
                stdout=subprocess.PIPE,
                stderr=subprocess.DEVNULL
            ).communicate()[0].decode('UTF-8').strip('\n')
            time.sleep(self.timeout)
            counter += 1
            if counter > 9:
                return False
        return True

    def main(self, mode="default"):
        """ Main function """
        self.mode = mode

        self.dprint_with_args("Run V")
        del self.args[0]

        self.wait_for_run()

        self.dprint("wim is started")
        self.wim_run()
        self.wim_goto()


if __name__ == '__main__':
    run = wim_runner()

    oni_is_here = subprocess.Popen(
        ['pgrep', '-f', '/opt/oni/oni'],
        stdout=subprocess.PIPE,
        stderr=subprocess.DEVNULL
    ).communicate()[0].decode('UTF-8').strip('\n')

    if not oni_is_here:
        run.spawn_oni()
        run.wait_for_oni()

    if run.wait_for_nvr():
        run.nvr_for_oni()
        run.switch_to_oni_window()
        sys.exit(0)

